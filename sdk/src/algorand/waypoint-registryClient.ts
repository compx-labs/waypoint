/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"waypoint-registry","structs":{"Route":[{"name":"tokenId","type":"uint64"},{"name":"depositor","type":"address"},{"name":"beneficiary","type":"address"},{"name":"startTs","type":"uint64"},{"name":"periodSecs","type":"uint64"},{"name":"payoutAmount","type":"uint64"},{"name":"maxPeriods","type":"uint64"},{"name":"depositAmount","type":"uint64"},{"name":"claimedAmount","type":"uint64"}],"WaypointRegistryParams":[{"name":"feeBps","type":"uint64"},{"name":"treasury","type":"address"},{"name":"fluxOracleAppId","type":"uint64"},{"name":"nominatedAssetId","type":"uint64"}]},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin"},{"type":"uint64","name":"feeBps"},{"type":"account","name":"treasury"},{"type":"uint64","name":"nominatedAssetId"},{"type":"application","name":"flux_oracle_app"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"setFeeBps","args":[{"type":"uint64","name":"feeBps"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setTreasury","args":[{"type":"account","name":"treasury"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setNominatedAssetId","args":[{"type":"uint64","name":"nominatedAssetId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"registerRoute","args":[{"type":"uint64","name":"routeAppId"},{"type":"uint64","name":"tokenId"},{"type":"account","name":"depositor"},{"type":"account","name":"beneficiary"},{"type":"uint64","name":"startTs"},{"type":"uint64","name":"periodSecs"},{"type":"uint64","name":"payoutAmount"},{"type":"uint64","name":"maxPeriods"},{"type":"uint64","name":"depositAmount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateRouteClaimedAmount","args":[{"type":"uint64","name":"routeAppId"},{"type":"uint64","name":"newClaimedAmount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getParams","args":[],"returns":{"type":"(uint64,address,uint64,uint64)","struct":"WaypointRegistryParams"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":8},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"fee_bps":{"keyType":"AVMString","valueType":"uint64","key":"ZmVlX2Jwcw=="},"contract_version":{"keyType":"AVMString","valueType":"uint64","key":"Y29udHJhY3RfdmVyc2lvbg=="},"treasury":{"keyType":"AVMString","valueType":"address","key":"dHJlYXN1cnk="},"nominated_asset_id":{"keyType":"AVMString","valueType":"uint64","key":"bm9taW5hdGVkX2Fzc2V0X2lk"},"num_routes":{"keyType":"AVMString","valueType":"uint64","key":"bnVtX3JvdXRlcw=="},"total_routed":{"keyType":"AVMString","valueType":"uint64","key":"dG90YWxfcm91dGVk"},"current_active_route_total":{"keyType":"AVMString","valueType":"uint64","key":"Y3VycmVudF9hY3RpdmVfcm91dGVfdG90YWw="},"flux_oracle_app":{"keyType":"AVMString","valueType":"AVMUint64","key":"Zmx1eF9vcmFjbGVfYXBw"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"routes":{"keyType":"uint64","valueType":"Route","prefix":"cg=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[615],"errorMessage":"Box must have value"},{"pc":[634],"errorMessage":"New claimed amount cannot exceed deposit amount"},{"pc":[625],"errorMessage":"New claimed amount must be greater than or equal to current claimed amount"},{"pc":[191,212,232,284,300,318,334],"errorMessage":"OnCompletion is not NoOp"},{"pc":[451],"errorMessage":"Only admin can set fee bps"},{"pc":[486],"errorMessage":"Only admin can set nominated asset id"},{"pc":[469],"errorMessage":"Only admin can set treasury"},{"pc":[511],"errorMessage":"Route already exists"},{"pc":[612],"errorMessage":"Route does not exist"},{"pc":[338],"errorMessage":"can only call when creating"},{"pc":[194,215,235,287,303,321],"errorMessage":"can only call when not creating"},{"pc":[449,467,484,559,572,585,654,666,671,676,681],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyACAAEmCRpjdXJyZW50X2FjdGl2ZV9yb3V0ZV90b3RhbAVhZG1pbggAAAAAAAAAAAdmZWVfYnBzCHRyZWFzdXJ5Em5vbWluYXRlZF9hc3NldF9pZApudW1fcm91dGVzDHRvdGFsX3JvdXRlZA9mbHV4X29yYWNsZV9hcHAxG0EAOIIHBFgok1sExZcpjASMJhcaBMaqZ3YE9xme6wSuvDQWBI3kDCg2GgCOBwCRAIEAbwBfACsAFwACIkMxGRREMRhEiAHRgAQVH3x1TFCwI0MxGRREMRhENhoBFzYaAheIAXAjQzEZFEQxGEQ2GgEXNhoCFzYaAxfAHDYaBBfAHDYaBRc2GgYXNhoHFzYaCBc2GgkXiADYI0MxGRREMRhENhoBF4gAtSNDMRkURDEYRDYaARfAHIgAkiNDMRkURDEYRDYaAReIAHAjQzEZFEQxGBRENhoBF8AcNhoCFzYaAxfAHDYaBBc2GgUXwDKIAAIjQ4oFACmL+2eL/BYrTGcnBIv9Z4ICEGNvbnRyYWN0X3ZlcnNpb24IAAAAAAAAA+hni/4WJwVMZycGKmcnBypnKCpnJwiL/2eJigEAMQAiKWVEEkSL/xYrTGeJigEAMQAiKWVEEkQnBIv/Z4mKAQAxACIpZUQSRIv/FicFTGeJigkAi/cWgAFyTFBJvUUBFESL+BaL+xaL/BaL/RaL/haL/xZPBYv5UIv6UE8FUE8EUE8DUE8CUExQKlC/IicGZUQXIwgWJwZMZyInB2VEF4v/CBYnB0xnIihlRBeL/wgWKExniYoCAIv+FoABckxQSb1FASMSREm+REmBcFuL/0sBD0RLAYFoW4v/D0SL/0wJi/8WTwJMXHBPAky/IihlRBdMCRYoTGeJIitlRCInBGVEIicFZUQiJwhlRBZPA08DUExQTFCJ","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Route = {
  tokenId: bigint,
  depositor: string,
  beneficiary: string,
  startTs: bigint,
  periodSecs: bigint,
  payoutAmount: bigint,
  maxPeriods: bigint,
  depositAmount: bigint,
  claimedAmount: bigint
}


/**
 * Converts the ABI tuple representation of a Route to the struct representation
 */
export function RouteFromTuple(abiTuple: [bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Route, APP_SPEC.structs) as Route
}

export type WaypointRegistryParams = {
  feeBps: bigint,
  treasury: string,
  fluxOracleAppId: bigint,
  nominatedAssetId: bigint
}


/**
 * Converts the ABI tuple representation of a WaypointRegistryParams to the struct representation
 */
export function WaypointRegistryParamsFromTuple(abiTuple: [bigint, string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.WaypointRegistryParams, APP_SPEC.structs) as WaypointRegistryParams
}

/**
 * The argument types for the WaypointRegistry contract
 */
export type WaypointRegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account,uint64,account,uint64,application)void': {
      admin: Uint8Array | string
      feeBps: bigint | number
      treasury: Uint8Array | string
      nominatedAssetId: bigint | number
      fluxOracleApp: bigint
    }
    'setFeeBps(uint64)void': {
      feeBps: bigint | number
    }
    'setTreasury(account)void': {
      treasury: Uint8Array | string
    }
    'setNominatedAssetId(uint64)void': {
      nominatedAssetId: bigint | number
    }
    'registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void': {
      routeAppId: bigint | number
      tokenId: bigint | number
      depositor: Uint8Array | string
      beneficiary: Uint8Array | string
      startTs: bigint | number
      periodSecs: bigint | number
      payoutAmount: bigint | number
      maxPeriods: bigint | number
      depositAmount: bigint | number
    }
    'updateRouteClaimedAmount(uint64,uint64)void': {
      routeAppId: bigint | number
      newClaimedAmount: bigint | number
    }
    'getParams()(uint64,address,uint64,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account,uint64,account,uint64,application)void': [admin: Uint8Array | string, feeBps: bigint | number, treasury: Uint8Array | string, nominatedAssetId: bigint | number, fluxOracleApp: bigint]
    'setFeeBps(uint64)void': [feeBps: bigint | number]
    'setTreasury(account)void': [treasury: Uint8Array | string]
    'setNominatedAssetId(uint64)void': [nominatedAssetId: bigint | number]
    'registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void': [routeAppId: bigint | number, tokenId: bigint | number, depositor: Uint8Array | string, beneficiary: Uint8Array | string, startTs: bigint | number, periodSecs: bigint | number, payoutAmount: bigint | number, maxPeriods: bigint | number, depositAmount: bigint | number]
    'updateRouteClaimedAmount(uint64,uint64)void': [routeAppId: bigint | number, newClaimedAmount: bigint | number]
    'getParams()(uint64,address,uint64,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type WaypointRegistryReturns = {
  'createApplication(account,uint64,account,uint64,application)void': void
  'setFeeBps(uint64)void': void
  'setTreasury(account)void': void
  'setNominatedAssetId(uint64)void': void
  'registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void': void
  'updateRouteClaimedAmount(uint64,uint64)void': void
  'getParams()(uint64,address,uint64,uint64)': WaypointRegistryParams
}

/**
 * Defines the types of available calls and state of the WaypointRegistry smart contract.
 */
export type WaypointRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account,uint64,account,uint64,application)void' | 'createApplication', {
      argsObj: WaypointRegistryArgs['obj']['createApplication(account,uint64,account,uint64,application)void']
      argsTuple: WaypointRegistryArgs['tuple']['createApplication(account,uint64,account,uint64,application)void']
      returns: WaypointRegistryReturns['createApplication(account,uint64,account,uint64,application)void']
    }>
    & Record<'setFeeBps(uint64)void' | 'setFeeBps', {
      argsObj: WaypointRegistryArgs['obj']['setFeeBps(uint64)void']
      argsTuple: WaypointRegistryArgs['tuple']['setFeeBps(uint64)void']
      returns: WaypointRegistryReturns['setFeeBps(uint64)void']
    }>
    & Record<'setTreasury(account)void' | 'setTreasury', {
      argsObj: WaypointRegistryArgs['obj']['setTreasury(account)void']
      argsTuple: WaypointRegistryArgs['tuple']['setTreasury(account)void']
      returns: WaypointRegistryReturns['setTreasury(account)void']
    }>
    & Record<'setNominatedAssetId(uint64)void' | 'setNominatedAssetId', {
      argsObj: WaypointRegistryArgs['obj']['setNominatedAssetId(uint64)void']
      argsTuple: WaypointRegistryArgs['tuple']['setNominatedAssetId(uint64)void']
      returns: WaypointRegistryReturns['setNominatedAssetId(uint64)void']
    }>
    & Record<'registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void' | 'registerRoute', {
      argsObj: WaypointRegistryArgs['obj']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: WaypointRegistryArgs['tuple']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']
      returns: WaypointRegistryReturns['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'updateRouteClaimedAmount(uint64,uint64)void' | 'updateRouteClaimedAmount', {
      argsObj: WaypointRegistryArgs['obj']['updateRouteClaimedAmount(uint64,uint64)void']
      argsTuple: WaypointRegistryArgs['tuple']['updateRouteClaimedAmount(uint64,uint64)void']
      returns: WaypointRegistryReturns['updateRouteClaimedAmount(uint64,uint64)void']
    }>
    & Record<'getParams()(uint64,address,uint64,uint64)' | 'getParams', {
      argsObj: WaypointRegistryArgs['obj']['getParams()(uint64,address,uint64,uint64)']
      argsTuple: WaypointRegistryArgs['tuple']['getParams()(uint64,address,uint64,uint64)']
      returns: WaypointRegistryReturns['getParams()(uint64,address,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        feeBps: bigint
        contractVersion: bigint
        treasury: string
        nominatedAssetId: bigint
        numRoutes: bigint
        totalRouted: bigint
        currentActiveRouteTotal: bigint
        fluxOracleApp: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        routes: Map<bigint | number, Route>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WaypointRegistrySignatures = keyof WaypointRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WaypointRegistryNonVoidMethodSignatures = keyof WaypointRegistryTypes['methods'] extends infer T ? T extends keyof WaypointRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the WaypointRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WaypointRegistrySignatures> = WaypointRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the WaypointRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WaypointRegistrySignatures> = WaypointRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WaypointRegistryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WaypointRegistryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WaypointRegistryCreateCallParams =
  | Expand<CallParams<WaypointRegistryArgs['obj']['createApplication(account,uint64,account,uint64,application)void'] | WaypointRegistryArgs['tuple']['createApplication(account,uint64,account,uint64,application)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<WaypointRegistryArgs['obj']['createApplication(account,uint64,account,uint64,application)void'] | WaypointRegistryArgs['tuple']['createApplication(account,uint64,account,uint64,application)void']> & {method: 'createApplication(account,uint64,account,uint64,application)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WaypointRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WaypointRegistryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the WaypointRegistry smart contract
 */
export abstract class WaypointRegistryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends WaypointRegistryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account,uint64,account,uint64,application)void':
            return WaypointRegistryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the waypoint-registry smart contract using the createApplication(account,uint64,account,uint64,application)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<WaypointRegistryArgs['obj']['createApplication(account,uint64,account,uint64,application)void'] | WaypointRegistryArgs['tuple']['createApplication(account,uint64,account,uint64,application)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account,uint64,account,uint64,application)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin, params.args.feeBps, params.args.treasury, params.args.nominatedAssetId, params.args.fluxOracleApp],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setFeeBps(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setFeeBps(params: CallParams<WaypointRegistryArgs['obj']['setFeeBps(uint64)void'] | WaypointRegistryArgs['tuple']['setFeeBps(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setFeeBps(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.feeBps],
    }
  }
  /**
   * Constructs a no op call for the setTreasury(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setTreasury(params: CallParams<WaypointRegistryArgs['obj']['setTreasury(account)void'] | WaypointRegistryArgs['tuple']['setTreasury(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setTreasury(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.treasury],
    }
  }
  /**
   * Constructs a no op call for the setNominatedAssetId(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setNominatedAssetId(params: CallParams<WaypointRegistryArgs['obj']['setNominatedAssetId(uint64)void'] | WaypointRegistryArgs['tuple']['setNominatedAssetId(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setNominatedAssetId(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nominatedAssetId],
    }
  }
  /**
   * Constructs a no op call for the registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerRoute(params: CallParams<WaypointRegistryArgs['obj']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRegistryArgs['tuple']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.routeAppId, params.args.tokenId, params.args.depositor, params.args.beneficiary, params.args.startTs, params.args.periodSecs, params.args.payoutAmount, params.args.maxPeriods, params.args.depositAmount],
    }
  }
  /**
   * Constructs a no op call for the updateRouteClaimedAmount(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateRouteClaimedAmount(params: CallParams<WaypointRegistryArgs['obj']['updateRouteClaimedAmount(uint64,uint64)void'] | WaypointRegistryArgs['tuple']['updateRouteClaimedAmount(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateRouteClaimedAmount(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.routeAppId, params.args.newClaimedAmount],
    }
  }
  /**
   * Constructs a no op call for the getParams()(uint64,address,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getParams(params: CallParams<WaypointRegistryArgs['obj']['getParams()(uint64,address,uint64,uint64)'] | WaypointRegistryArgs['tuple']['getParams()(uint64,address,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getParams()(uint64,address,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the waypoint-registry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WaypointRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WaypointRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WaypointRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WaypointRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the waypoint-registry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WaypointRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? WaypointRegistryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (WaypointRegistryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new WaypointRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-registry smart contract using the createApplication(account,uint64,account,uint64,application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<WaypointRegistryArgs['obj']['createApplication(account,uint64,account,uint64,application)void'] | WaypointRegistryArgs['tuple']['createApplication(account,uint64,account,uint64,application)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(WaypointRegistryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-registry smart contract using the createApplication(account,uint64,account,uint64,application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<WaypointRegistryArgs['obj']['createApplication(account,uint64,account,uint64,application)void'] | WaypointRegistryArgs['tuple']['createApplication(account,uint64,account,uint64,application)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(WaypointRegistryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-registry smart contract using an ABI method call using the createApplication(account,uint64,account,uint64,application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<WaypointRegistryArgs['obj']['createApplication(account,uint64,account,uint64,application)void'] | WaypointRegistryArgs['tuple']['createApplication(account,uint64,account,uint64,application)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(WaypointRegistryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | WaypointRegistryReturns['createApplication(account,uint64,account,uint64,application)void']) }, appClient: new WaypointRegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the waypoint-registry smart contract
 */
export class WaypointRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WaypointRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the WaypointRegistry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WaypointRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WaypointRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WaypointRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WaypointRegistryClient> {
    return new WaypointRegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WaypointRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WaypointRegistryClient> {
    return new WaypointRegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-registry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setFeeBps(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setFeeBps: (params: CallParams<WaypointRegistryArgs['obj']['setFeeBps(uint64)void'] | WaypointRegistryArgs['tuple']['setFeeBps(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointRegistryParamsFactory.setFeeBps(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setTreasury(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setTreasury: (params: CallParams<WaypointRegistryArgs['obj']['setTreasury(account)void'] | WaypointRegistryArgs['tuple']['setTreasury(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointRegistryParamsFactory.setTreasury(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setNominatedAssetId(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setNominatedAssetId: (params: CallParams<WaypointRegistryArgs['obj']['setNominatedAssetId(uint64)void'] | WaypointRegistryArgs['tuple']['setNominatedAssetId(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointRegistryParamsFactory.setNominatedAssetId(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerRoute: (params: CallParams<WaypointRegistryArgs['obj']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRegistryArgs['tuple']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointRegistryParamsFactory.registerRoute(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `updateRouteClaimedAmount(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateRouteClaimedAmount: (params: CallParams<WaypointRegistryArgs['obj']['updateRouteClaimedAmount(uint64,uint64)void'] | WaypointRegistryArgs['tuple']['updateRouteClaimedAmount(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointRegistryParamsFactory.updateRouteClaimedAmount(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `getParams()(uint64,address,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getParams: (params: CallParams<WaypointRegistryArgs['obj']['getParams()(uint64,address,uint64,uint64)'] | WaypointRegistryArgs['tuple']['getParams()(uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(WaypointRegistryParamsFactory.getParams(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-registry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setFeeBps(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setFeeBps: (params: CallParams<WaypointRegistryArgs['obj']['setFeeBps(uint64)void'] | WaypointRegistryArgs['tuple']['setFeeBps(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointRegistryParamsFactory.setFeeBps(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setTreasury(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setTreasury: (params: CallParams<WaypointRegistryArgs['obj']['setTreasury(account)void'] | WaypointRegistryArgs['tuple']['setTreasury(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointRegistryParamsFactory.setTreasury(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setNominatedAssetId(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setNominatedAssetId: (params: CallParams<WaypointRegistryArgs['obj']['setNominatedAssetId(uint64)void'] | WaypointRegistryArgs['tuple']['setNominatedAssetId(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointRegistryParamsFactory.setNominatedAssetId(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerRoute: (params: CallParams<WaypointRegistryArgs['obj']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRegistryArgs['tuple']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointRegistryParamsFactory.registerRoute(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `updateRouteClaimedAmount(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateRouteClaimedAmount: (params: CallParams<WaypointRegistryArgs['obj']['updateRouteClaimedAmount(uint64,uint64)void'] | WaypointRegistryArgs['tuple']['updateRouteClaimedAmount(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointRegistryParamsFactory.updateRouteClaimedAmount(params))
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `getParams()(uint64,address,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getParams: (params: CallParams<WaypointRegistryArgs['obj']['getParams()(uint64,address,uint64,uint64)'] | WaypointRegistryArgs['tuple']['getParams()(uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(WaypointRegistryParamsFactory.getParams(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-registry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setFeeBps(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setFeeBps: async (params: CallParams<WaypointRegistryArgs['obj']['setFeeBps(uint64)void'] | WaypointRegistryArgs['tuple']['setFeeBps(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointRegistryParamsFactory.setFeeBps(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRegistryReturns['setFeeBps(uint64)void'])}
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setTreasury(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setTreasury: async (params: CallParams<WaypointRegistryArgs['obj']['setTreasury(account)void'] | WaypointRegistryArgs['tuple']['setTreasury(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointRegistryParamsFactory.setTreasury(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRegistryReturns['setTreasury(account)void'])}
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `setNominatedAssetId(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setNominatedAssetId: async (params: CallParams<WaypointRegistryArgs['obj']['setNominatedAssetId(uint64)void'] | WaypointRegistryArgs['tuple']['setNominatedAssetId(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointRegistryParamsFactory.setNominatedAssetId(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRegistryReturns['setNominatedAssetId(uint64)void'])}
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerRoute: async (params: CallParams<WaypointRegistryArgs['obj']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRegistryArgs['tuple']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointRegistryParamsFactory.registerRoute(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRegistryReturns['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `updateRouteClaimedAmount(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateRouteClaimedAmount: async (params: CallParams<WaypointRegistryArgs['obj']['updateRouteClaimedAmount(uint64,uint64)void'] | WaypointRegistryArgs['tuple']['updateRouteClaimedAmount(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointRegistryParamsFactory.updateRouteClaimedAmount(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRegistryReturns['updateRouteClaimedAmount(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the waypoint-registry smart contract using the `getParams()(uint64,address,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getParams: async (params: CallParams<WaypointRegistryArgs['obj']['getParams()(uint64,address,uint64,uint64)'] | WaypointRegistryArgs['tuple']['getParams()(uint64,address,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(WaypointRegistryParamsFactory.getParams(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRegistryReturns['getParams()(uint64,address,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WaypointRegistryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current waypoint-registry app
   */
  state = {
    /**
     * Methods to access global state for the current waypoint-registry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          feeBps: result.fee_bps,
          contractVersion: result.contract_version,
          treasury: result.treasury,
          nominatedAssetId: result.nominated_asset_id,
          numRoutes: result.num_routes,
          totalRouted: result.total_routed,
          currentActiveRouteTotal: result.current_active_route_total,
          fluxOracleApp: result.flux_oracle_app,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the fee_bps key in global state
       */
      feeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_version")) as bigint | undefined },
      /**
       * Get the current value of the treasury key in global state
       */
      treasury: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("treasury")) as string | undefined },
      /**
       * Get the current value of the nominated_asset_id key in global state
       */
      nominatedAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nominated_asset_id")) as bigint | undefined },
      /**
       * Get the current value of the num_routes key in global state
       */
      numRoutes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("num_routes")) as bigint | undefined },
      /**
       * Get the current value of the total_routed key in global state
       */
      totalRouted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_routed")) as bigint | undefined },
      /**
       * Get the current value of the current_active_route_total key in global state
       */
      currentActiveRouteTotal: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("current_active_route_total")) as bigint | undefined },
      /**
       * Get the current value of the flux_oracle_app key in global state
       */
      fluxOracleApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("flux_oracle_app")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current waypoint-registry app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the routes map in box state
       */
      routes: {
        /**
         * Get all current values of the routes map in box state
         */
        getMap: async (): Promise<Map<bigint, Route>> => { return (await this.appClient.state.box.getMap("routes")) as Map<bigint, Route> },
        /**
         * Get a current value of the routes map by key from box state
         */
        value: async (key: bigint | number): Promise<Route | undefined> => { return await this.appClient.state.box.getMapValue("routes", key) as Route | undefined },
      },
    },
  }

  public newGroup(): WaypointRegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a setFeeBps(uint64)void method call against the waypoint-registry contract
       */
      setFeeBps(params: CallParams<WaypointRegistryArgs['obj']['setFeeBps(uint64)void'] | WaypointRegistryArgs['tuple']['setFeeBps(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setFeeBps(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setTreasury(account)void method call against the waypoint-registry contract
       */
      setTreasury(params: CallParams<WaypointRegistryArgs['obj']['setTreasury(account)void'] | WaypointRegistryArgs['tuple']['setTreasury(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setTreasury(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setNominatedAssetId(uint64)void method call against the waypoint-registry contract
       */
      setNominatedAssetId(params: CallParams<WaypointRegistryArgs['obj']['setNominatedAssetId(uint64)void'] | WaypointRegistryArgs['tuple']['setNominatedAssetId(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setNominatedAssetId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void method call against the waypoint-registry contract
       */
      registerRoute(params: CallParams<WaypointRegistryArgs['obj']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRegistryArgs['tuple']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerRoute(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateRouteClaimedAmount(uint64,uint64)void method call against the waypoint-registry contract
       */
      updateRouteClaimedAmount(params: CallParams<WaypointRegistryArgs['obj']['updateRouteClaimedAmount(uint64,uint64)void'] | WaypointRegistryArgs['tuple']['updateRouteClaimedAmount(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateRouteClaimedAmount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getParams()(uint64,address,uint64,uint64) method call against the waypoint-registry contract
       */
      getParams(params: CallParams<WaypointRegistryArgs['obj']['getParams()(uint64,address,uint64,uint64)'] | WaypointRegistryArgs['tuple']['getParams()(uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getParams(params)))
        resultMappers.push((v) => client.decodeReturnValue('getParams()(uint64,address,uint64,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the waypoint-registry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WaypointRegistryComposer
  }
}
export type WaypointRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setFeeBps(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFeeBps(params?: CallParams<WaypointRegistryArgs['obj']['setFeeBps(uint64)void'] | WaypointRegistryArgs['tuple']['setFeeBps(uint64)void']>): WaypointRegistryComposer<[...TReturns, WaypointRegistryReturns['setFeeBps(uint64)void'] | undefined]>

  /**
   * Calls the setTreasury(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTreasury(params?: CallParams<WaypointRegistryArgs['obj']['setTreasury(account)void'] | WaypointRegistryArgs['tuple']['setTreasury(account)void']>): WaypointRegistryComposer<[...TReturns, WaypointRegistryReturns['setTreasury(account)void'] | undefined]>

  /**
   * Calls the setNominatedAssetId(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setNominatedAssetId(params?: CallParams<WaypointRegistryArgs['obj']['setNominatedAssetId(uint64)void'] | WaypointRegistryArgs['tuple']['setNominatedAssetId(uint64)void']>): WaypointRegistryComposer<[...TReturns, WaypointRegistryReturns['setNominatedAssetId(uint64)void'] | undefined]>

  /**
   * Calls the registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerRoute(params?: CallParams<WaypointRegistryArgs['obj']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRegistryArgs['tuple']['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void']>): WaypointRegistryComposer<[...TReturns, WaypointRegistryReturns['registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the updateRouteClaimedAmount(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateRouteClaimedAmount(params?: CallParams<WaypointRegistryArgs['obj']['updateRouteClaimedAmount(uint64,uint64)void'] | WaypointRegistryArgs['tuple']['updateRouteClaimedAmount(uint64,uint64)void']>): WaypointRegistryComposer<[...TReturns, WaypointRegistryReturns['updateRouteClaimedAmount(uint64,uint64)void'] | undefined]>

  /**
   * Calls the getParams()(uint64,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getParams(params?: CallParams<WaypointRegistryArgs['obj']['getParams()(uint64,address,uint64,uint64)'] | WaypointRegistryArgs['tuple']['getParams()(uint64,address,uint64,uint64)']>): WaypointRegistryComposer<[...TReturns, WaypointRegistryReturns['getParams()(uint64,address,uint64,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the waypoint-registry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WaypointRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WaypointRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WaypointRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WaypointRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WaypointRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WaypointRegistryComposerResults<TReturns>>
}
export type WaypointRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

