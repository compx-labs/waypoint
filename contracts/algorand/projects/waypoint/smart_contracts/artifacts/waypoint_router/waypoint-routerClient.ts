/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"waypoint-router","structs":{"Route":[{"name":"sender","type":"address"},{"name":"receiver","type":"address"},{"name":"tokenAmount","type":"uint64"},{"name":"tokenId","type":"uint64"},{"name":"nftKey","type":"uint64"},{"name":"startTime","type":"uint64"},{"name":"endTime","type":"uint64"},{"name":"routeState","type":"uint8"},{"name":"claimedAmount","type":"uint64"},{"name":"escrowAccount","type":"address"}],"RouteKey":[{"name":"escrowAddress","type":"address"},{"name":"nftKey","type":"uint64"}]},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin","desc":"- The account that will have administrative privileges over the contract"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Creates the waypoint router application and sets the initial admin account.\nThis method can only be called during contract creation.","events":[],"recommendations":{}},{"name":"initApplication","args":[{"type":"account","name":"treasury_account","desc":"- The account that will receive fees collected by the contract"},{"type":"uint64","name":"fee_bps","desc":"- The fee rate in basis points (1 bps = 0.01%)"},{"type":"uint64","name":"creation_fee_algos","desc":"- The fee in microAlgos required to create a new route"},{"type":"uint64","name":"min_duration","desc":"- The minimum allowed duration for routes in seconds"},{"type":"uint64","name":"max_duration","desc":"- The maximum allowed duration for routes in seconds"},{"type":"uint64","name":"contract_version","desc":"- The version number of this contract deployment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initializes the waypoint router application with configuration parameters.\nThis method sets up the core operational parameters for the contract.","events":[],"recommendations":{}},{"name":"updateParams","args":[{"type":"uint64","name":"fee_bps","desc":"- The new fee rate in basis points (1 bps = 0.01%)"},{"type":"uint64","name":"creation_fee_algos","desc":"- The new fee in microAlgos required to create routes"},{"type":"uint64","name":"min_duration","desc":"- The new minimum allowed duration for routes in seconds"},{"type":"uint64","name":"max_duration","desc":"- The new maximum allowed duration for routes in seconds"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Updates the operational parameters of the waypoint router contract.\nOnly the admin account can call this method to modify contract settings.","events":[],"recommendations":{}},{"name":"updateAdmin","args":[{"type":"account","name":"new_admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":7,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin_account":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5fYWNjb3VudA=="},"treasury_account":{"keyType":"AVMString","valueType":"address","key":"dHJlYXN1cnlfYWNjb3VudA=="},"fee_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVlX2Jwcw=="},"creation_fee_algos":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3JlYXRpb25fZmVlX2FsZ29z"},"min_duration":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluX2R1cmF0aW9u"},"max_duration":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X2R1cmF0aW9u"},"contract_version":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udHJhY3RfdmVyc2lvbg=="},"routes_created":{"keyType":"AVMString","valueType":"AVMUint64","key":"cm91dGVzX2NyZWF0ZWQ="},"last_updated":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF91cGRhdGVk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"routes":{"keyType":"RouteKey","valueType":"Route","prefix":"cm91dGVz"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[132,150,178,216],"errorMessage":"OnCompletion is not NoOp"},{"pc":[370],"errorMessage":"Only admin can update admin"},{"pc":[336],"errorMessage":"Only admin can update params"},{"pc":[220],"errorMessage":"can only call when creating"},{"pc":[135,153,181],"errorMessage":"can only call when not creating"},{"pc":[334,368],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyACAAEmBg1hZG1pbl9hY2NvdW50DGxhc3RfdXBkYXRlZAdmZWVfYnBzEmNyZWF0aW9uX2ZlZV9hbGdvcwxtaW5fZHVyYXRpb24MbWF4X2R1cmF0aW9uMRtBACOCBATaU/7+BCYmGY0E87K3DASCqx7ENhoAjgQAVgAwABQAAiJDMRkURDEYRDYaARfAHIgA1yNDMRkURDEYRDYaARc2GgIXNhoDFzYaBBeIAJkjQzEZFEQxGEQ2GgEXwBw2GgIXNhoDFzYaBBc2GgUXNhoGF4gAHSNDMRkURDEYFEQ2GgEXwByIAAIjQ4oBACiL/2eJigYAgBB0cmVhc3VyeV9hY2NvdW50i/pnKov7ZyuL/GcnBIv9ZycFi/5ngBBjb250cmFjdF92ZXJzaW9ui/9ngA5yb3V0ZXNfY3JlYXRlZCJnKTIHZ4mKBAAxACIoZUQSRCqL/Gcri/1nJwSL/mcnBYv/ZykyB2eJigEAMQAiKGVEEkQoi/9nKTIHZ4k=","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Route = {
  sender: string,
  receiver: string,
  tokenAmount: bigint,
  tokenId: bigint,
  nftKey: bigint,
  startTime: bigint,
  endTime: bigint,
  routeState: number,
  claimedAmount: bigint,
  escrowAccount: string
}


/**
 * Converts the ABI tuple representation of a Route to the struct representation
 */
export function RouteFromTuple(abiTuple: [string, string, bigint, bigint, bigint, bigint, bigint, number, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Route, APP_SPEC.structs) as Route
}

export type RouteKey = {
  escrowAddress: string,
  nftKey: bigint
}


/**
 * Converts the ABI tuple representation of a RouteKey to the struct representation
 */
export function RouteKeyFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.RouteKey, APP_SPEC.structs) as RouteKey
}

/**
 * The argument types for the WaypointRouter contract
 */
export type WaypointRouterArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account)void': {
      /**
       * - The account that will have administrative privileges over the contract
       */
      admin: Uint8Array | string
    }
    'initApplication(account,uint64,uint64,uint64,uint64,uint64)void': {
      /**
       * - The account that will receive fees collected by the contract
       */
      treasuryAccount: Uint8Array | string
      /**
       * - The fee rate in basis points (1 bps = 0.01%)
       */
      feeBps: bigint | number
      /**
       * - The fee in microAlgos required to create a new route
       */
      creationFeeAlgos: bigint | number
      /**
       * - The minimum allowed duration for routes in seconds
       */
      minDuration: bigint | number
      /**
       * - The maximum allowed duration for routes in seconds
       */
      maxDuration: bigint | number
      /**
       * - The version number of this contract deployment
       */
      contractVersion: bigint | number
    }
    'updateParams(uint64,uint64,uint64,uint64)void': {
      /**
       * - The new fee rate in basis points (1 bps = 0.01%)
       */
      feeBps: bigint | number
      /**
       * - The new fee in microAlgos required to create routes
       */
      creationFeeAlgos: bigint | number
      /**
       * - The new minimum allowed duration for routes in seconds
       */
      minDuration: bigint | number
      /**
       * - The new maximum allowed duration for routes in seconds
       */
      maxDuration: bigint | number
    }
    'updateAdmin(account)void': {
      newAdmin: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account)void': [admin: Uint8Array | string]
    'initApplication(account,uint64,uint64,uint64,uint64,uint64)void': [treasuryAccount: Uint8Array | string, feeBps: bigint | number, creationFeeAlgos: bigint | number, minDuration: bigint | number, maxDuration: bigint | number, contractVersion: bigint | number]
    'updateParams(uint64,uint64,uint64,uint64)void': [feeBps: bigint | number, creationFeeAlgos: bigint | number, minDuration: bigint | number, maxDuration: bigint | number]
    'updateAdmin(account)void': [newAdmin: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type WaypointRouterReturns = {
  'createApplication(account)void': void
  'initApplication(account,uint64,uint64,uint64,uint64,uint64)void': void
  'updateParams(uint64,uint64,uint64,uint64)void': void
  'updateAdmin(account)void': void
}

/**
 * Defines the types of available calls and state of the WaypointRouter smart contract.
 */
export type WaypointRouterTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account)void' | 'createApplication', {
      argsObj: WaypointRouterArgs['obj']['createApplication(account)void']
      argsTuple: WaypointRouterArgs['tuple']['createApplication(account)void']
      returns: WaypointRouterReturns['createApplication(account)void']
    }>
    & Record<'initApplication(account,uint64,uint64,uint64,uint64,uint64)void' | 'initApplication', {
      argsObj: WaypointRouterArgs['obj']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: WaypointRouterArgs['tuple']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']
      returns: WaypointRouterReturns['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'updateParams(uint64,uint64,uint64,uint64)void' | 'updateParams', {
      argsObj: WaypointRouterArgs['obj']['updateParams(uint64,uint64,uint64,uint64)void']
      argsTuple: WaypointRouterArgs['tuple']['updateParams(uint64,uint64,uint64,uint64)void']
      returns: WaypointRouterReturns['updateParams(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'updateAdmin(account)void' | 'updateAdmin', {
      argsObj: WaypointRouterArgs['obj']['updateAdmin(account)void']
      argsTuple: WaypointRouterArgs['tuple']['updateAdmin(account)void']
      returns: WaypointRouterReturns['updateAdmin(account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        adminAccount: string
        treasuryAccount: string
        feeBps: bigint
        creationFeeAlgos: bigint
        minDuration: bigint
        maxDuration: bigint
        contractVersion: bigint
        routesCreated: bigint
        lastUpdated: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        routes: Map<RouteKey, Route>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WaypointRouterSignatures = keyof WaypointRouterTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WaypointRouterNonVoidMethodSignatures = keyof WaypointRouterTypes['methods'] extends infer T ? T extends keyof WaypointRouterTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the WaypointRouter smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WaypointRouterSignatures> = WaypointRouterTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the WaypointRouter smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WaypointRouterSignatures> = WaypointRouterTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WaypointRouterTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WaypointRouterTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WaypointRouterCreateCallParams =
  | Expand<CallParams<WaypointRouterArgs['obj']['createApplication(account)void'] | WaypointRouterArgs['tuple']['createApplication(account)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<WaypointRouterArgs['obj']['createApplication(account)void'] | WaypointRouterArgs['tuple']['createApplication(account)void']> & {method: 'createApplication(account)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WaypointRouterDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WaypointRouterCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the WaypointRouter smart contract
 */
export abstract class WaypointRouterParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends WaypointRouterCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account)void':
            return WaypointRouterParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the waypoint-router smart contract using the createApplication(account)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<WaypointRouterArgs['obj']['createApplication(account)void'] | WaypointRouterArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(account,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
  * Initializes the waypoint router application with configuration parameters.
  This method sets up the core operational parameters for the contract.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<WaypointRouterArgs['obj']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(account,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.treasuryAccount, params.args.feeBps, params.args.creationFeeAlgos, params.args.minDuration, params.args.maxDuration, params.args.contractVersion],
    }
  }
  /**
   * Constructs a no op call for the updateParams(uint64,uint64,uint64,uint64)void ABI method
   *
  * Updates the operational parameters of the waypoint router contract.
  Only the admin account can call this method to modify contract settings.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateParams(params: CallParams<WaypointRouterArgs['obj']['updateParams(uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['updateParams(uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateParams(uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.feeBps, params.args.creationFeeAlgos, params.args.minDuration, params.args.maxDuration],
    }
  }
  /**
   * Constructs a no op call for the updateAdmin(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdmin(params: CallParams<WaypointRouterArgs['obj']['updateAdmin(account)void'] | WaypointRouterArgs['tuple']['updateAdmin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAdmin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the waypoint-router smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WaypointRouterFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WaypointRouterFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WaypointRouterClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WaypointRouterClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the waypoint-router smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WaypointRouterDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? WaypointRouterParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (WaypointRouterCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new WaypointRouterClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-router smart contract using the createApplication(account)void ABI method.
       *
      * Creates the waypoint router application and sets the initial admin account.
      This method can only be called during contract creation.

       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<WaypointRouterArgs['obj']['createApplication(account)void'] | WaypointRouterArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(WaypointRouterParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-router smart contract using the createApplication(account)void ABI method.
       *
      * Creates the waypoint router application and sets the initial admin account.
      This method can only be called during contract creation.

       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<WaypointRouterArgs['obj']['createApplication(account)void'] | WaypointRouterArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(WaypointRouterParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-router smart contract using an ABI method call using the createApplication(account)void ABI method.
       *
      * Creates the waypoint router application and sets the initial admin account.
      This method can only be called during contract creation.

       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<WaypointRouterArgs['obj']['createApplication(account)void'] | WaypointRouterArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(WaypointRouterParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | WaypointRouterReturns['createApplication(account)void']) }, appClient: new WaypointRouterClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the waypoint-router smart contract
 */
export class WaypointRouterClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WaypointRouterClient`
   *
   * @param appClient An `AppClient` instance which has been created with the WaypointRouter app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WaypointRouterClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WaypointRouterNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WaypointRouterClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WaypointRouterClient> {
    return new WaypointRouterClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WaypointRouterClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WaypointRouterClient> {
    return new WaypointRouterClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-router smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `initApplication(account,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Initializes the waypoint router application with configuration parameters.
    This method sets up the core operational parameters for the contract.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<WaypointRouterArgs['obj']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointRouterParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `updateParams(uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Updates the operational parameters of the waypoint router contract.
    Only the admin account can call this method to modify contract settings.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateParams: (params: CallParams<WaypointRouterArgs['obj']['updateParams(uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['updateParams(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointRouterParamsFactory.updateParams(params))
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `updateAdmin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdmin: (params: CallParams<WaypointRouterArgs['obj']['updateAdmin(account)void'] | WaypointRouterArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointRouterParamsFactory.updateAdmin(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-router smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `initApplication(account,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Initializes the waypoint router application with configuration parameters.
    This method sets up the core operational parameters for the contract.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<WaypointRouterArgs['obj']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointRouterParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `updateParams(uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Updates the operational parameters of the waypoint router contract.
    Only the admin account can call this method to modify contract settings.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateParams: (params: CallParams<WaypointRouterArgs['obj']['updateParams(uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['updateParams(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointRouterParamsFactory.updateParams(params))
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `updateAdmin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdmin: (params: CallParams<WaypointRouterArgs['obj']['updateAdmin(account)void'] | WaypointRouterArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointRouterParamsFactory.updateAdmin(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-router smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `initApplication(account,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Initializes the waypoint router application with configuration parameters.
    This method sets up the core operational parameters for the contract.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<WaypointRouterArgs['obj']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointRouterParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRouterReturns['initApplication(account,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `updateParams(uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Updates the operational parameters of the waypoint router contract.
    Only the admin account can call this method to modify contract settings.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateParams: async (params: CallParams<WaypointRouterArgs['obj']['updateParams(uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['updateParams(uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointRouterParamsFactory.updateParams(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRouterReturns['updateParams(uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the waypoint-router smart contract using the `updateAdmin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdmin: async (params: CallParams<WaypointRouterArgs['obj']['updateAdmin(account)void'] | WaypointRouterArgs['tuple']['updateAdmin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointRouterParamsFactory.updateAdmin(params))
      return {...result, return: result.return as unknown as (undefined | WaypointRouterReturns['updateAdmin(account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WaypointRouterClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current waypoint-router app
   */
  state = {
    /**
     * Methods to access global state for the current waypoint-router app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          adminAccount: result.admin_account,
          treasuryAccount: result.treasury_account,
          feeBps: result.fee_bps,
          creationFeeAlgos: result.creation_fee_algos,
          minDuration: result.min_duration,
          maxDuration: result.max_duration,
          contractVersion: result.contract_version,
          routesCreated: result.routes_created,
          lastUpdated: result.last_updated,
        }
      },
      /**
       * Get the current value of the admin_account key in global state
       */
      adminAccount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin_account")) as string | undefined },
      /**
       * Get the current value of the treasury_account key in global state
       */
      treasuryAccount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("treasury_account")) as string | undefined },
      /**
       * Get the current value of the fee_bps key in global state
       */
      feeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the creation_fee_algos key in global state
       */
      creationFeeAlgos: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("creation_fee_algos")) as bigint | undefined },
      /**
       * Get the current value of the min_duration key in global state
       */
      minDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("min_duration")) as bigint | undefined },
      /**
       * Get the current value of the max_duration key in global state
       */
      maxDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_duration")) as bigint | undefined },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_version")) as bigint | undefined },
      /**
       * Get the current value of the routes_created key in global state
       */
      routesCreated: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("routes_created")) as bigint | undefined },
      /**
       * Get the current value of the last_updated key in global state
       */
      lastUpdated: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_updated")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current waypoint-router app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the routes map in box state
       */
      routes: {
        /**
         * Get all current values of the routes map in box state
         */
        getMap: async (): Promise<Map<RouteKey, Route>> => { return (await this.appClient.state.box.getMap("routes")) as Map<RouteKey, Route> },
        /**
         * Get a current value of the routes map by key from box state
         */
        value: async (key: RouteKey): Promise<Route | undefined> => { return await this.appClient.state.box.getMapValue("routes", key) as Route | undefined },
      },
    },
  }

  public newGroup(): WaypointRouterComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(account,uint64,uint64,uint64,uint64,uint64)void method call against the waypoint-router contract
       */
      initApplication(params: CallParams<WaypointRouterArgs['obj']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateParams(uint64,uint64,uint64,uint64)void method call against the waypoint-router contract
       */
      updateParams(params: CallParams<WaypointRouterArgs['obj']['updateParams(uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['updateParams(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAdmin(account)void method call against the waypoint-router contract
       */
      updateAdmin(params: CallParams<WaypointRouterArgs['obj']['updateAdmin(account)void'] | WaypointRouterArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the waypoint-router contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WaypointRouterComposer
  }
}
export type WaypointRouterComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(account,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
  * Initializes the waypoint router application with configuration parameters.
  This method sets up the core operational parameters for the contract.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<WaypointRouterArgs['obj']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['initApplication(account,uint64,uint64,uint64,uint64,uint64)void']>): WaypointRouterComposer<[...TReturns, WaypointRouterReturns['initApplication(account,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the updateParams(uint64,uint64,uint64,uint64)void ABI method.
   *
  * Updates the operational parameters of the waypoint router contract.
  Only the admin account can call this method to modify contract settings.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateParams(params?: CallParams<WaypointRouterArgs['obj']['updateParams(uint64,uint64,uint64,uint64)void'] | WaypointRouterArgs['tuple']['updateParams(uint64,uint64,uint64,uint64)void']>): WaypointRouterComposer<[...TReturns, WaypointRouterReturns['updateParams(uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the updateAdmin(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdmin(params?: CallParams<WaypointRouterArgs['obj']['updateAdmin(account)void'] | WaypointRouterArgs['tuple']['updateAdmin(account)void']>): WaypointRouterComposer<[...TReturns, WaypointRouterReturns['updateAdmin(account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the waypoint-router smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WaypointRouterComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WaypointRouterComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WaypointRouterComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WaypointRouterComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WaypointRouterComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WaypointRouterComposerResults<TReturns>>
}
export type WaypointRouterComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

