#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "admin_account" "last_updated" "fee_bps" "creation_fee_algos" "min_duration" "max_duration"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:16-17
    // @contract({ name: "waypoint-router", avmVersion: 11 })
    // export class WaypointRouter extends Contract {
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0xda53fefe 0x2626198d 0xf3b2b70c 0x82ab1ec4 // method "createApplication(account)void", method "initApplication(account,uint64,uint64,uint64,uint64,uint64)void", method "updateParams(uint64,uint64,uint64,uint64)void", method "updateAdmin(account)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_initApplication_route@4 main_updateParams_route@5 main_updateAdmin_route@6

main_after_if_else@10:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:16-17
    // @contract({ name: "waypoint-router", avmVersion: 11 })
    // export class WaypointRouter extends Contract {
    intc_0 // 0
    return

main_updateAdmin_route@6:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:91
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:16-17
    // @contract({ name: "waypoint-router", avmVersion: 11 })
    // export class WaypointRouter extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:91
    // @abimethod({ allowActions: "NoOp" })
    callsub updateAdmin
    intc_1 // 1
    return

main_updateParams_route@5:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:81
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:16-17
    // @contract({ name: "waypoint-router", avmVersion: 11 })
    // export class WaypointRouter extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:81
    // @abimethod({ allowActions: "NoOp" })
    callsub updateParams
    intc_1 // 1
    return

main_initApplication_route@4:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:51
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:16-17
    // @contract({ name: "waypoint-router", avmVersion: 11 })
    // export class WaypointRouter extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:51
    // @abimethod({ allowActions: "NoOp" })
    callsub initApplication
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:35
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:16-17
    // @contract({ name: "waypoint-router", avmVersion: 11 })
    // export class WaypointRouter extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:35
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/waypoint_router/waypoint_router.algo.ts::WaypointRouter.createApplication(admin: bytes) -> void:
createApplication:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:35-36
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    // public createApplication(admin: Account): void {
    proto 1 0
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:18
    // admin_account = GlobalState<Account>();
    bytec_0 // "admin_account"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:37
    // this.admin_account.value = admin;
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/waypoint_router/waypoint_router.algo.ts::WaypointRouter.initApplication(treasury_account: bytes, fee_bps: uint64, creation_fee_algos: uint64, min_duration: uint64, max_duration: uint64, contract_version: uint64) -> void:
initApplication:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:51-59
    // @abimethod({ allowActions: "NoOp" })
    // public initApplication(
    //   treasury_account: Account,
    //   fee_bps: uint64,
    //   creation_fee_algos: uint64,
    //   min_duration: uint64,
    //   max_duration: uint64,
    //   contract_version: uint64
    // ): void {
    proto 6 0
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:19
    // treasury_account = GlobalState<Account>();
    pushbytes "treasury_account"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:60
    // this.treasury_account.value = treasury_account;
    frame_dig -6
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:20
    // fee_bps = GlobalState<uint64>();
    bytec_2 // "fee_bps"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:61
    // this.fee_bps.value = fee_bps;
    frame_dig -5
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:21
    // creation_fee_algos = GlobalState<uint64>();
    bytec_3 // "creation_fee_algos"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:62
    // this.creation_fee_algos.value = creation_fee_algos;
    frame_dig -4
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:22
    // min_duration = GlobalState<uint64>();
    bytec 4 // "min_duration"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:63
    // this.min_duration.value = min_duration;
    frame_dig -3
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:23
    // max_duration = GlobalState<uint64>();
    bytec 5 // "max_duration"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:64
    // this.max_duration.value = max_duration;
    frame_dig -2
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:24
    // contract_version = GlobalState<uint64>();
    pushbytes "contract_version"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:65
    // this.contract_version.value = contract_version;
    frame_dig -1
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:25
    // routes_created = GlobalState<uint64>();
    pushbytes "routes_created"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:66
    // this.routes_created.value = 0;
    intc_0 // 0
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:27
    // last_updated = GlobalState<uint64>();
    bytec_1 // "last_updated"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:67
    // this.last_updated.value = op.Global.latestTimestamp;
    global LatestTimestamp
    app_global_put
    retsub


// smart_contracts/waypoint_router/waypoint_router.algo.ts::WaypointRouter.updateParams(fee_bps: uint64, creation_fee_algos: uint64, min_duration: uint64, max_duration: uint64) -> void:
updateParams:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:81-82
    // @abimethod({ allowActions: "NoOp" })
    // public updateParams(fee_bps: uint64, creation_fee_algos: uint64, min_duration: uint64, max_duration: uint64): void {
    proto 4 0
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:83
    // assert(op.Txn.sender === this.admin_account.value, "Only admin can update params");
    txn Sender
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:18
    // admin_account = GlobalState<Account>();
    intc_0 // 0
    bytec_0 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:83
    // assert(op.Txn.sender === this.admin_account.value, "Only admin can update params");
    ==
    assert // Only admin can update params
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:20
    // fee_bps = GlobalState<uint64>();
    bytec_2 // "fee_bps"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:84
    // this.fee_bps.value = fee_bps;
    frame_dig -4
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:21
    // creation_fee_algos = GlobalState<uint64>();
    bytec_3 // "creation_fee_algos"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:85
    // this.creation_fee_algos.value = creation_fee_algos;
    frame_dig -3
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:22
    // min_duration = GlobalState<uint64>();
    bytec 4 // "min_duration"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:86
    // this.min_duration.value = min_duration;
    frame_dig -2
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:23
    // max_duration = GlobalState<uint64>();
    bytec 5 // "max_duration"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:87
    // this.max_duration.value = max_duration;
    frame_dig -1
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:27
    // last_updated = GlobalState<uint64>();
    bytec_1 // "last_updated"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:88
    // this.last_updated.value = op.Global.latestTimestamp;
    global LatestTimestamp
    app_global_put
    retsub


// smart_contracts/waypoint_router/waypoint_router.algo.ts::WaypointRouter.updateAdmin(new_admin: bytes) -> void:
updateAdmin:
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:91-92
    // @abimethod({ allowActions: "NoOp" })
    // public updateAdmin(new_admin: Account): void {
    proto 1 0
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:93
    // assert(op.Txn.sender === this.admin_account.value, "Only admin can update admin");
    txn Sender
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:18
    // admin_account = GlobalState<Account>();
    intc_0 // 0
    bytec_0 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:93
    // assert(op.Txn.sender === this.admin_account.value, "Only admin can update admin");
    ==
    assert // Only admin can update admin
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:18
    // admin_account = GlobalState<Account>();
    bytec_0 // "admin_account"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:94
    // this.admin_account.value = new_admin;
    frame_dig -1
    app_global_put
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:27
    // last_updated = GlobalState<uint64>();
    bytec_1 // "last_updated"
    // smart_contracts/waypoint_router/waypoint_router.algo.ts:95
    // this.last_updated.value = op.Global.latestTimestamp;
    global LatestTimestamp
    app_global_put
    retsub
