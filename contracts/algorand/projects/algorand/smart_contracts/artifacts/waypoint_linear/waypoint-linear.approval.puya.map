{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/waypoint/contracts/algorand/projects/algorand/smart_contracts/waypoint_linear/config.algo.ts",
    "/Users/kierannelson/Development/waypoint/contracts/algorand/projects/algorand/smart_contracts/waypoint_linear/waypoint-linear.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AA6GG;;AAAA;AAAA;AAAA;;AAAA;AA7GH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AA6GG;;;AAAA;;AAtDA;;AAAA;AAAA;AAAA;;AAAA;AAvDH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuDG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAjDH;;;AAAA;AAAA;;AAiDG;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA5CH;;;AAAA;AA4CG;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAvCH;;;AAAA;AAuCG;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AArBH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAqBG;;;AAAA;;AAAD;;;AAE2B;;AAAA;;AAAA;AApB3B;AAoBE;AAAA;AACgC;;AAAA;AApBlC;;AAoBE;AAAA;AACqB;;AAAA;AAnBvB;;AAmBE;AAAA;AAlBF;;AAmBE;;AAAA;AArBF;;AAsBgC;;;;;;;;;;AAA9B;AAC6B;;AAAA;AApB/B;;;;;;;;;;;;;;;;;AAoBE;AAAA;AACsB;;AAAA;AApBxB;AAoBE;AAAA;AAfF;;AAiBwB;AAAtB;AAhBF;;AAiB2B;AAAzB;AAhBF;;AAiB6B;AAA3B;AAhBF;;AAiB2B;AAAzB;AAhBF;;AAiB8B;AAA5B;AAhBF;AAiB8B;AAA5B;;AAGF;;;AAEgB;;AAtChB;AAAA;AAAA;AAAA;AAsCS;AAAP;AACgC;;AAAA;AAtClC;;AAsCE;AAAA;;AAEF;;;AAEgB;;AA3ChB;AAAA;AAAA;AAAA;AA2CS;AAAP;AAC8B;;AAAA;AA1ChC;;AA0CE;AAAA;;AAEF;;;AAEgB;;AAhDhB;AAAA;AAAA;AAAA;AAgDS;AAAP;AAhDF;AAiDE;;AAAA;;AAGF;;;;;AAYE;;AAAA;AACA;;AAAA;AACA;;AAAA;AACA;;AAAA;AACA;;AAAA;AAEA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAGwB;;AAHxB;AAAA;;;;AAAA;AAKA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;;AAAA;AAKsB;;AAAA;AA1ExB;AA0EE;AAAA;AACsB;;AAAA;AAtExB;;AAsEE;AAAA;AACyB;;AAAA;AAtE3B;;AAsEE;AAAA;AAC2B;;AAAA;AAtE7B;;AAsEE;AAAA;AACyB;;AAAA;AAtE3B;;AAsEE;AAAA;AAC4B;;AAAA;AAtE9B;;AAsEE;AAAA;AA3EF;;AA4EE;;AAAA;AA7EF;;;;;;;;;;;AA8E4C;;AAA1C;AApFF;AAAA;;AAAA;AAAA;AAyFgE;AAAvC;;AAAA;AACgB;;;AAAnB;AAAd;AAAA;;AACN;;;AACE;AA3FJ;AAAA;;AAAA;AAAA;;;;;;;;;;;AA2FI;;;ADrHkC;;;;;ACqHlC;;;;;;;;;;AAWJ;;;;;;;AAEgB;;AAlGhB;AAAA;;AAAA;AAAA;AAkGS;AAAP;AAtGF;AAAA;AAAA;AAAA;AAuGsC;AAA9B;AACN;AAEmB;;AAAb;AArGR;AAAA;;AAAA;AAAA;AAuH8C;AAAtC;AAAA;;AACF;AAAJ;;;AACS;;;AApHX;AAAA;AAAA;AAAA;AAgJ2D;AAAnD;AAAA;;AACF;;AAAA;AAAJ;;;AACS;;AAAA;;AAAA;AAhDT;AAAA;AAEA;AA1GF;AAAA;;AAAA;AAAA;;;;;;;;;;AA0GE;;;AD1IoC;;;;;AC0IpC;AApGF;AAAA;AAAA;AAAA;AA6G2D;AAA1B;AACH;AA9G9B;AA8GE;AAAA;;AAuCO;AApDiB;;;AArG1B;AAAA;;AAAA;AAAA;AA2HoD;AAA5C;AAAA;;AACN;;;AACS;;;AAsBM;;;AAnBT;;AAAA;;AAAkB;AACY;AAA9B;AAAA;;AAAyB;AA/HjC;AAAA;;AAAA;AAAA;AAiIoD;AACpB;AAAA;AAAA;AAnIhC;AAAA;;AAAA;AAAA;AAqIwD;AAnIxD;AAAA;;AAAA;AAAA;AAoI0D;AAAlD;;AAC6B;AAAA;;AAEnC;;;;;AASe;;;AAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAIQ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 2"
    },
    "7": {
      "op": "bytecblock 0x0000000000000000 \"admin\" \"claimed_amount\" \"token_id\" \"start_ts\" \"period_secs\" \"payout_amount\" \"max_periods\" \"deposit_amount\" \"beneficiary\" \"flux_oracle_app_id\" \"fee_bps\" \"treasury\" \"contract_version\""
    },
    "175": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "177": {
      "op": "bz main_after_if_else@12",
      "stack_out": []
    },
    "180": {
      "op": "pushbytess 0xa713f6a9 0xa94bbc73 0x7299c577 0xaf97fe50 0x5ef62e1d 0x4351bbaa // method \"createApplication(account,uint64,account,uint64,uint64,uint64)void\", method \"setFluxOracleAppId(uint64)void\", method \"setContractVersion(uint64)void\", method \"setAdmin(account)void\", method \"createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer,pay)void\", method \"claim(axfer,pay,appl)void\"",
      "defined_out": [
        "Method(claim(axfer,pay,appl)void)",
        "Method(createApplication(account,uint64,account,uint64,uint64,uint64)void)",
        "Method(createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer,pay)void)",
        "Method(setAdmin(account)void)",
        "Method(setContractVersion(uint64)void)",
        "Method(setFluxOracleAppId(uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64,account,uint64,uint64,uint64)void)",
        "Method(setFluxOracleAppId(uint64)void)",
        "Method(setContractVersion(uint64)void)",
        "Method(setAdmin(account)void)",
        "Method(createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer,pay)void)",
        "Method(claim(axfer,pay,appl)void)"
      ]
    },
    "212": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(claim(axfer,pay,appl)void)",
        "Method(createApplication(account,uint64,account,uint64,uint64,uint64)void)",
        "Method(createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer,pay)void)",
        "Method(setAdmin(account)void)",
        "Method(setContractVersion(uint64)void)",
        "Method(setFluxOracleAppId(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64,account,uint64,uint64,uint64)void)",
        "Method(setFluxOracleAppId(uint64)void)",
        "Method(setContractVersion(uint64)void)",
        "Method(setAdmin(account)void)",
        "Method(createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer,pay)void)",
        "Method(claim(axfer,pay,appl)void)",
        "tmp%2#0"
      ]
    },
    "215": {
      "op": "match main_createApplication_route@3 main_setFluxOracleAppId_route@4 main_setContractVersion_route@5 main_setAdmin_route@6 main_createRoute_route@7 main_claim_route@8",
      "stack_out": []
    },
    "229": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "return",
      "stack_out": []
    },
    "231": {
      "block": "main_claim_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "233": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "237": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "238": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "240": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "3"
      ]
    },
    "242": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "243": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "244": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "246": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "axfer"
      ]
    },
    "247": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "248": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "249": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%50#0"
      ]
    },
    "251": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%50#0",
        "2"
      ]
    },
    "252": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "253": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "254": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "256": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "257": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "258": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "259": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%51#0"
      ]
    },
    "261": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%51#0",
        "1"
      ]
    },
    "262": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0"
      ]
    },
    "263": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "264": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "266": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "appl"
      ]
    },
    "268": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "269": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0"
      ]
    },
    "270": {
      "callsub": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.claim",
      "op": "callsub claim",
      "stack_out": []
    },
    "273": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "return",
      "stack_out": []
    },
    "275": {
      "block": "main_createRoute_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "277": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "278": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "279": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "281": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "282": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "285": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "286": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "288": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "291": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "292": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "295": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "296": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "299": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "300": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "303": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "304": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "307": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "308": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "311": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "312": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "314": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "2"
      ]
    },
    "315": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0"
      ]
    },
    "316": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "317": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "319": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "320": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "321": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0"
      ]
    },
    "322": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "tmp%44#0"
      ]
    },
    "324": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "tmp%44#0",
        "1"
      ]
    },
    "325": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "326": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "327": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "329": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "330": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "331": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "332": {
      "callsub": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.createRoute",
      "op": "callsub createRoute",
      "stack_out": []
    },
    "335": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "336": {
      "op": "return",
      "stack_out": []
    },
    "337": {
      "block": "main_setAdmin_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "339": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "340": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "341": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "343": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "344": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "347": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "348": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "350": {
      "callsub": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.setAdmin",
      "op": "callsub setAdmin",
      "stack_out": []
    },
    "353": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "354": {
      "op": "return",
      "stack_out": []
    },
    "355": {
      "block": "main_setContractVersion_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "357": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "358": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "359": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "361": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "362": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "365": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "366": {
      "callsub": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.setContractVersion",
      "op": "callsub setContractVersion",
      "stack_out": []
    },
    "369": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "370": {
      "op": "return",
      "stack_out": []
    },
    "371": {
      "block": "main_setFluxOracleAppId_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "373": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "374": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "375": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "377": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "378": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "381": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "382": {
      "callsub": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.setFluxOracleAppId",
      "op": "callsub setFluxOracleAppId",
      "stack_out": []
    },
    "385": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "386": {
      "op": "return",
      "stack_out": []
    },
    "387": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "389": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "390": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "391": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "393": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "394": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "395": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "398": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "399": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "401": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "404": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "405": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "408": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "409": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "411": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "414": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "415": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "418": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "419": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "422": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "423": {
      "callsub": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "426": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "427": {
      "op": "return",
      "stack_out": []
    },
    "428": {
      "subroutine": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.createApplication",
      "params": {
        "admin#0": "bytes",
        "fluxOracleAppId#0": "uint64",
        "treasury#0": "bytes",
        "feeBps#0": "uint64",
        "registryAppId#0": "uint64",
        "tokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "431": {
      "op": "frame_dig -6",
      "defined_out": [
        "admin#0 (copy)"
      ],
      "stack_out": [
        "admin#0 (copy)"
      ]
    },
    "433": {
      "op": "acct_params_get AcctAuthAddr",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "435": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "436": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "\"admin\""
      ]
    },
    "437": {
      "op": "swap",
      "stack_out": [
        "\"admin\"",
        "value%0#0"
      ]
    },
    "438": {
      "op": "app_global_put",
      "stack_out": []
    },
    "439": {
      "op": "frame_dig -5",
      "defined_out": [
        "fluxOracleAppId#0 (copy)"
      ],
      "stack_out": [
        "fluxOracleAppId#0 (copy)"
      ]
    },
    "441": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "442": {
      "op": "bytec 10 // \"flux_oracle_app_id\"",
      "defined_out": [
        "\"flux_oracle_app_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"flux_oracle_app_id\""
      ]
    },
    "444": {
      "op": "swap",
      "stack_out": [
        "\"flux_oracle_app_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "445": {
      "op": "app_global_put",
      "stack_out": []
    },
    "446": {
      "op": "frame_dig -3",
      "defined_out": [
        "feeBps#0 (copy)"
      ],
      "stack_out": [
        "feeBps#0 (copy)"
      ]
    },
    "448": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "449": {
      "op": "bytec 11 // \"fee_bps\"",
      "defined_out": [
        "\"fee_bps\"",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "\"fee_bps\""
      ]
    },
    "451": {
      "op": "swap",
      "stack_out": [
        "\"fee_bps\"",
        "val_as_bytes%1#0"
      ]
    },
    "452": {
      "op": "app_global_put",
      "stack_out": []
    },
    "453": {
      "op": "bytec 12 // \"treasury\"",
      "defined_out": [
        "\"treasury\""
      ],
      "stack_out": [
        "\"treasury\""
      ]
    },
    "455": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"treasury\"",
        "treasury#0 (copy)"
      ],
      "stack_out": [
        "\"treasury\"",
        "treasury#0 (copy)"
      ]
    },
    "457": {
      "op": "app_global_put",
      "stack_out": []
    },
    "458": {
      "op": "bytec 13 // \"contract_version\"",
      "defined_out": [
        "\"contract_version\""
      ],
      "stack_out": [
        "\"contract_version\""
      ]
    },
    "460": {
      "op": "pushbytes 0x00000000000003e8",
      "defined_out": [
        "\"contract_version\"",
        "0x00000000000003e8"
      ],
      "stack_out": [
        "\"contract_version\"",
        "0x00000000000003e8"
      ]
    },
    "470": {
      "op": "app_global_put",
      "stack_out": []
    },
    "471": {
      "op": "frame_dig -2",
      "defined_out": [
        "registryAppId#0 (copy)"
      ],
      "stack_out": [
        "registryAppId#0 (copy)"
      ]
    },
    "473": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "474": {
      "op": "pushbytes \"registry_app_id\"",
      "defined_out": [
        "\"registry_app_id\"",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "\"registry_app_id\""
      ]
    },
    "491": {
      "op": "swap",
      "stack_out": [
        "\"registry_app_id\"",
        "val_as_bytes%2#0"
      ]
    },
    "492": {
      "op": "app_global_put",
      "stack_out": []
    },
    "493": {
      "op": "frame_dig -1",
      "defined_out": [
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "tokenId#0 (copy)"
      ]
    },
    "495": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "496": {
      "op": "bytec_3 // \"token_id\"",
      "defined_out": [
        "\"token_id\"",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "\"token_id\""
      ]
    },
    "497": {
      "op": "swap",
      "stack_out": [
        "\"token_id\"",
        "val_as_bytes%3#0"
      ]
    },
    "498": {
      "op": "app_global_put",
      "stack_out": []
    },
    "499": {
      "op": "bytec 4 // \"start_ts\"",
      "defined_out": [
        "\"start_ts\""
      ],
      "stack_out": [
        "\"start_ts\""
      ]
    },
    "501": {
      "op": "bytec_0 // 0x0000000000000000",
      "defined_out": [
        "\"start_ts\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"start_ts\"",
        "0x0000000000000000"
      ]
    },
    "502": {
      "op": "app_global_put",
      "stack_out": []
    },
    "503": {
      "op": "bytec 5 // \"period_secs\"",
      "defined_out": [
        "\"period_secs\""
      ],
      "stack_out": [
        "\"period_secs\""
      ]
    },
    "505": {
      "op": "bytec_0 // 0x0000000000000000",
      "stack_out": [
        "\"period_secs\"",
        "0x0000000000000000"
      ]
    },
    "506": {
      "op": "app_global_put",
      "stack_out": []
    },
    "507": {
      "op": "bytec 6 // \"payout_amount\"",
      "defined_out": [
        "\"payout_amount\""
      ],
      "stack_out": [
        "\"payout_amount\""
      ]
    },
    "509": {
      "op": "bytec_0 // 0x0000000000000000",
      "stack_out": [
        "\"payout_amount\"",
        "0x0000000000000000"
      ]
    },
    "510": {
      "op": "app_global_put",
      "stack_out": []
    },
    "511": {
      "op": "bytec 7 // \"max_periods\"",
      "defined_out": [
        "\"max_periods\""
      ],
      "stack_out": [
        "\"max_periods\""
      ]
    },
    "513": {
      "op": "bytec_0 // 0x0000000000000000",
      "stack_out": [
        "\"max_periods\"",
        "0x0000000000000000"
      ]
    },
    "514": {
      "op": "app_global_put",
      "stack_out": []
    },
    "515": {
      "op": "bytec 8 // \"deposit_amount\"",
      "defined_out": [
        "\"deposit_amount\""
      ],
      "stack_out": [
        "\"deposit_amount\""
      ]
    },
    "517": {
      "op": "bytec_0 // 0x0000000000000000",
      "stack_out": [
        "\"deposit_amount\"",
        "0x0000000000000000"
      ]
    },
    "518": {
      "op": "app_global_put",
      "stack_out": []
    },
    "519": {
      "op": "bytec_2 // \"claimed_amount\"",
      "defined_out": [
        "\"claimed_amount\""
      ],
      "stack_out": [
        "\"claimed_amount\""
      ]
    },
    "520": {
      "op": "bytec_0 // 0x0000000000000000",
      "stack_out": [
        "\"claimed_amount\"",
        "0x0000000000000000"
      ]
    },
    "521": {
      "op": "app_global_put",
      "stack_out": []
    },
    "522": {
      "retsub": true,
      "op": "retsub"
    },
    "523": {
      "subroutine": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.setFluxOracleAppId",
      "params": {
        "fluxOracleAppId#0": "uint64"
      },
      "block": "setFluxOracleAppId",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "526": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "528": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "529": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "530": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "531": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "532": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "533": {
      "error": "Only admin can set flux oracle app id",
      "op": "assert // Only admin can set flux oracle app id",
      "stack_out": []
    },
    "534": {
      "op": "frame_dig -1",
      "defined_out": [
        "fluxOracleAppId#0 (copy)"
      ],
      "stack_out": [
        "fluxOracleAppId#0 (copy)"
      ]
    },
    "536": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "537": {
      "op": "bytec 10 // \"flux_oracle_app_id\"",
      "defined_out": [
        "\"flux_oracle_app_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"flux_oracle_app_id\""
      ]
    },
    "539": {
      "op": "swap",
      "stack_out": [
        "\"flux_oracle_app_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "540": {
      "op": "app_global_put",
      "stack_out": []
    },
    "541": {
      "retsub": true,
      "op": "retsub"
    },
    "542": {
      "subroutine": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.setContractVersion",
      "params": {
        "contractVersion#0": "uint64"
      },
      "block": "setContractVersion",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "545": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "547": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "548": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "551": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "552": {
      "error": "Only admin can set contract version",
      "op": "assert // Only admin can set contract version",
      "stack_out": []
    },
    "553": {
      "op": "frame_dig -1",
      "defined_out": [
        "contractVersion#0 (copy)"
      ],
      "stack_out": [
        "contractVersion#0 (copy)"
      ]
    },
    "555": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "556": {
      "op": "bytec 13 // \"contract_version\"",
      "defined_out": [
        "\"contract_version\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"contract_version\""
      ]
    },
    "558": {
      "op": "swap",
      "stack_out": [
        "\"contract_version\"",
        "val_as_bytes%0#0"
      ]
    },
    "559": {
      "op": "app_global_put",
      "stack_out": []
    },
    "560": {
      "retsub": true,
      "op": "retsub"
    },
    "561": {
      "subroutine": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.setAdmin",
      "params": {
        "admin#0": "bytes"
      },
      "block": "setAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "564": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "566": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "567": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "568": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "569": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "570": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "571": {
      "error": "Only admin can set new admin",
      "op": "assert // Only admin can set new admin",
      "stack_out": []
    },
    "572": {
      "op": "bytec_1 // \"admin\"",
      "stack_out": [
        "\"admin\""
      ]
    },
    "573": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ]
    },
    "575": {
      "op": "app_global_put",
      "stack_out": []
    },
    "576": {
      "retsub": true,
      "op": "retsub"
    },
    "577": {
      "subroutine": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.createRoute",
      "params": {
        "beneficiary#0": "bytes",
        "startTs#0": "uint64",
        "periodSecs#0": "uint64",
        "payoutAmount#0": "uint64",
        "maxPeriods#0": "uint64",
        "depositAmount#0": "uint64",
        "tokenId#0": "uint64",
        "tokenTransfer#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "createRoute",
      "stack_in": [],
      "op": "proto 9 0"
    },
    "580": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "fee#0"
      ]
    },
    "582": {
      "op": "frame_dig -7",
      "defined_out": [
        "periodSecs#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "periodSecs#0 (copy)"
      ]
    },
    "584": {
      "error": "Period seconds must be greater than 0",
      "op": "assert // Period seconds must be greater than 0",
      "stack_out": [
        "fee#0"
      ]
    },
    "585": {
      "op": "frame_dig -5",
      "defined_out": [
        "maxPeriods#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "maxPeriods#0 (copy)"
      ]
    },
    "587": {
      "error": "Max periods must be greater than 0",
      "op": "assert // Max periods must be greater than 0",
      "stack_out": [
        "fee#0"
      ]
    },
    "588": {
      "op": "frame_dig -6",
      "defined_out": [
        "payoutAmount#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "payoutAmount#0 (copy)"
      ]
    },
    "590": {
      "error": "Payout amount must be greater than 0",
      "op": "assert // Payout amount must be greater than 0",
      "stack_out": [
        "fee#0"
      ]
    },
    "591": {
      "op": "frame_dig -4",
      "defined_out": [
        "depositAmount#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "depositAmount#0 (copy)"
      ]
    },
    "593": {
      "error": "Deposit amount must be greater than 0",
      "op": "assert // Deposit amount must be greater than 0",
      "stack_out": [
        "fee#0"
      ]
    },
    "594": {
      "op": "frame_dig -3",
      "defined_out": [
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "tokenId#0 (copy)"
      ]
    },
    "596": {
      "error": "Token ID must be greater than 0",
      "op": "assert // Token ID must be greater than 0",
      "stack_out": [
        "fee#0"
      ]
    },
    "597": {
      "op": "frame_dig -2",
      "defined_out": [
        "tokenTransfer#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "tokenTransfer#0 (copy)"
      ]
    },
    "599": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%5#0"
      ]
    },
    "601": {
      "op": "frame_dig -3",
      "stack_out": [
        "fee#0",
        "tmp%5#0",
        "tokenId#0 (copy)"
      ]
    },
    "603": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%6#0"
      ]
    },
    "604": {
      "op": "bz createRoute_bool_false@4",
      "stack_out": [
        "fee#0"
      ]
    },
    "607": {
      "op": "frame_dig -2",
      "stack_out": [
        "fee#0",
        "tokenTransfer#0 (copy)"
      ]
    },
    "609": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%7#0"
      ]
    },
    "611": {
      "op": "frame_dig -4",
      "stack_out": [
        "fee#0",
        "tmp%7#0",
        "depositAmount#0 (copy)"
      ]
    },
    "613": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%8#0"
      ]
    },
    "614": {
      "op": "bz createRoute_bool_false@4",
      "stack_out": [
        "fee#0"
      ]
    },
    "617": {
      "op": "frame_dig -2",
      "stack_out": [
        "fee#0",
        "tokenTransfer#0 (copy)"
      ]
    },
    "619": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%9#0"
      ]
    },
    "621": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "623": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%11#0"
      ]
    },
    "624": {
      "op": "bz createRoute_bool_false@4",
      "stack_out": [
        "fee#0"
      ]
    },
    "627": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "fee#0",
        "and_result%0#0"
      ]
    },
    "628": {
      "block": "createRoute_bool_merge@5",
      "stack_in": [
        "fee#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "fee#0"
      ]
    },
    "629": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "631": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%12#0"
      ]
    },
    "633": {
      "op": "frame_dig -4",
      "defined_out": [
        "depositAmount#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%12#0",
        "depositAmount#0 (copy)"
      ]
    },
    "635": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%13#0"
      ]
    },
    "636": {
      "op": "bz createRoute_bool_false@8",
      "stack_out": [
        "fee#0"
      ]
    },
    "639": {
      "op": "frame_dig -1",
      "stack_out": [
        "fee#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "641": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%14#0"
      ]
    },
    "643": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "645": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%16#0"
      ]
    },
    "646": {
      "op": "bz createRoute_bool_false@8",
      "stack_out": [
        "fee#0"
      ]
    },
    "649": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "fee#0",
        "and_result%1#0"
      ]
    },
    "650": {
      "block": "createRoute_bool_merge@9",
      "stack_in": [
        "fee#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "fee#0"
      ]
    },
    "651": {
      "op": "frame_dig -3",
      "defined_out": [
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "tokenId#0 (copy)"
      ]
    },
    "653": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%0#0"
      ]
    },
    "654": {
      "op": "bytec_3 // \"token_id\"",
      "defined_out": [
        "\"token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%0#0",
        "\"token_id\""
      ]
    },
    "655": {
      "op": "swap",
      "stack_out": [
        "fee#0",
        "\"token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "656": {
      "op": "app_global_put",
      "stack_out": [
        "fee#0"
      ]
    },
    "657": {
      "op": "frame_dig -8",
      "defined_out": [
        "startTs#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "startTs#0 (copy)"
      ]
    },
    "659": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%1#0"
      ]
    },
    "660": {
      "op": "bytec 4 // \"start_ts\"",
      "defined_out": [
        "\"start_ts\"",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%1#0",
        "\"start_ts\""
      ]
    },
    "662": {
      "op": "swap",
      "stack_out": [
        "fee#0",
        "\"start_ts\"",
        "val_as_bytes%1#0"
      ]
    },
    "663": {
      "op": "app_global_put",
      "stack_out": [
        "fee#0"
      ]
    },
    "664": {
      "op": "frame_dig -7",
      "defined_out": [
        "periodSecs#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "periodSecs#0 (copy)"
      ]
    },
    "666": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%2#0"
      ]
    },
    "667": {
      "op": "bytec 5 // \"period_secs\"",
      "defined_out": [
        "\"period_secs\"",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%2#0",
        "\"period_secs\""
      ]
    },
    "669": {
      "op": "swap",
      "stack_out": [
        "fee#0",
        "\"period_secs\"",
        "val_as_bytes%2#0"
      ]
    },
    "670": {
      "op": "app_global_put",
      "stack_out": [
        "fee#0"
      ]
    },
    "671": {
      "op": "frame_dig -6",
      "defined_out": [
        "payoutAmount#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "payoutAmount#0 (copy)"
      ]
    },
    "673": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%3#0"
      ]
    },
    "674": {
      "op": "bytec 6 // \"payout_amount\"",
      "defined_out": [
        "\"payout_amount\"",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%3#0",
        "\"payout_amount\""
      ]
    },
    "676": {
      "op": "swap",
      "stack_out": [
        "fee#0",
        "\"payout_amount\"",
        "val_as_bytes%3#0"
      ]
    },
    "677": {
      "op": "app_global_put",
      "stack_out": [
        "fee#0"
      ]
    },
    "678": {
      "op": "frame_dig -5",
      "defined_out": [
        "maxPeriods#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "maxPeriods#0 (copy)"
      ]
    },
    "680": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%4#0"
      ]
    },
    "681": {
      "op": "bytec 7 // \"max_periods\"",
      "defined_out": [
        "\"max_periods\"",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%4#0",
        "\"max_periods\""
      ]
    },
    "683": {
      "op": "swap",
      "stack_out": [
        "fee#0",
        "\"max_periods\"",
        "val_as_bytes%4#0"
      ]
    },
    "684": {
      "op": "app_global_put",
      "stack_out": [
        "fee#0"
      ]
    },
    "685": {
      "op": "frame_dig -4",
      "defined_out": [
        "depositAmount#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "depositAmount#0 (copy)"
      ]
    },
    "687": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%5#0"
      ]
    },
    "688": {
      "op": "bytec 8 // \"deposit_amount\"",
      "defined_out": [
        "\"deposit_amount\"",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%5#0",
        "\"deposit_amount\""
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "fee#0",
        "\"deposit_amount\"",
        "val_as_bytes%5#0"
      ]
    },
    "691": {
      "op": "app_global_put",
      "stack_out": [
        "fee#0"
      ]
    },
    "692": {
      "op": "bytec 9 // \"beneficiary\"",
      "defined_out": [
        "\"beneficiary\""
      ],
      "stack_out": [
        "fee#0",
        "\"beneficiary\""
      ]
    },
    "694": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"beneficiary\"",
        "beneficiary#0 (copy)"
      ],
      "stack_out": [
        "fee#0",
        "\"beneficiary\"",
        "beneficiary#0 (copy)"
      ]
    },
    "696": {
      "op": "app_global_put",
      "stack_out": [
        "fee#0"
      ]
    },
    "697": {
      "op": "pushbytes \"depositor\"",
      "defined_out": [
        "\"depositor\""
      ],
      "stack_out": [
        "fee#0",
        "\"depositor\""
      ]
    },
    "708": {
      "op": "txn Sender",
      "defined_out": [
        "\"depositor\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "fee#0",
        "\"depositor\"",
        "new_state_value%0#0"
      ]
    },
    "710": {
      "op": "app_global_put",
      "stack_out": [
        "fee#0"
      ]
    },
    "711": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "fee#0",
        "0"
      ]
    },
    "712": {
      "op": "bytec 11 // \"fee_bps\"",
      "defined_out": [
        "\"fee_bps\"",
        "0"
      ],
      "stack_out": [
        "fee#0",
        "0",
        "\"fee_bps\""
      ]
    },
    "714": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "fee#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "715": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "fee#0",
        "maybe_value%0#0"
      ]
    },
    "716": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%17#0"
      ]
    },
    "717": {
      "op": "frame_dig -4",
      "stack_out": [
        "fee#0",
        "tmp%17#0",
        "depositAmount#0 (copy)"
      ]
    },
    "719": {
      "op": "mulw",
      "defined_out": [
        "feeHi#0",
        "feeLo#0"
      ],
      "stack_out": [
        "fee#0",
        "feeHi#0",
        "feeLo#0"
      ]
    },
    "720": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "feeHi#0",
        "feeLo#0"
      ],
      "stack_out": [
        "fee#0",
        "feeHi#0",
        "feeLo#0",
        "10000"
      ]
    },
    "723": {
      "op": "divw",
      "defined_out": [
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "fee#0"
      ]
    },
    "724": {
      "op": "dup",
      "stack_out": [
        "fee#0",
        "fee#0",
        "fee#0"
      ]
    },
    "725": {
      "op": "frame_bury 0",
      "defined_out": [
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "fee#0"
      ]
    },
    "727": {
      "op": "bz createRoute_after_if_else@12",
      "stack_out": [
        "fee#0"
      ]
    },
    "730": {
      "op": "itxn_begin"
    },
    "731": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee#0",
        "0"
      ]
    },
    "732": {
      "op": "bytec 12 // \"treasury\"",
      "defined_out": [
        "\"treasury\"",
        "0",
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "0",
        "\"treasury\""
      ]
    },
    "734": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "fee#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "735": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "fee#0",
        "maybe_value%1#0"
      ]
    },
    "736": {
      "op": "frame_dig -3",
      "stack_out": [
        "fee#0",
        "maybe_value%1#0",
        "tokenId#0 (copy)"
      ]
    },
    "738": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "fee#0",
        "maybe_value%1#0"
      ]
    },
    "740": {
      "op": "frame_dig 0",
      "stack_out": [
        "fee#0",
        "maybe_value%1#0",
        "fee#0"
      ]
    },
    "742": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "fee#0",
        "maybe_value%1#0"
      ]
    },
    "744": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "fee#0"
      ]
    },
    "746": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "4"
      ]
    },
    "747": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "fee#0"
      ]
    },
    "749": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "1000"
      ]
    },
    "752": {
      "op": "itxn_field Fee",
      "stack_out": [
        "fee#0"
      ]
    },
    "754": {
      "op": "itxn_submit"
    },
    "755": {
      "block": "createRoute_after_if_else@12",
      "stack_in": [
        "fee#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "756": {
      "block": "createRoute_bool_false@8",
      "stack_in": [
        "fee#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "fee#0",
        "and_result%1#0"
      ]
    },
    "757": {
      "op": "b createRoute_bool_merge@9"
    },
    "760": {
      "block": "createRoute_bool_false@4",
      "stack_in": [
        "fee#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "fee#0",
        "and_result%0#0"
      ]
    },
    "761": {
      "op": "b createRoute_bool_merge@5"
    },
    "764": {
      "subroutine": "smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.claim",
      "params": {
        "_tokenTransfer#0": "uint64",
        "_mbrTxn#0": "uint64",
        "_fluxAppCall#0": "uint64"
      },
      "block": "claim",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "767": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "alreadyClaimed#0"
      ]
    },
    "769": {
      "op": "dupn 3",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0"
      ]
    },
    "771": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tmp%0#0"
      ]
    },
    "773": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tmp%0#0",
        "0"
      ]
    },
    "774": {
      "op": "bytec 9 // \"beneficiary\"",
      "defined_out": [
        "\"beneficiary\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tmp%0#0",
        "0",
        "\"beneficiary\""
      ]
    },
    "776": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "777": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "778": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tmp%1#0"
      ]
    },
    "779": {
      "error": "Only beneficiary can claim",
      "op": "assert // Only beneficiary can claim",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0"
      ]
    },
    "780": {
      "op": "intc_0 // 0",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "0"
      ]
    },
    "781": {
      "op": "bytec_3 // \"token_id\"",
      "defined_out": [
        "\"token_id\"",
        "0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "0",
        "\"token_id\""
      ]
    },
    "782": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "783": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "maybe_value%1#0"
      ]
    },
    "784": {
      "op": "btoi",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0"
      ]
    },
    "785": {
      "op": "dup",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "tokenId#0"
      ]
    },
    "786": {
      "error": "Route not initialized",
      "op": "assert // Route not initialized",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0"
      ]
    },
    "787": {
      "op": "global LatestTimestamp"
    },
    "789": {
      "op": "dup"
    },
    "790": {
      "op": "intc_0 // 0"
    },
    "791": {
      "op": "bytec 4 // \"start_ts\"",
      "defined_out": [
        "\"start_ts\"",
        "0",
        "now#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "now#0",
        "0",
        "\"start_ts\""
      ]
    },
    "793": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "now#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "now#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "794": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "now#0",
        "maybe_value%0#1"
      ]
    },
    "795": {
      "op": "btoi",
      "defined_out": [
        "now#0",
        "startTs#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "now#0",
        "startTs#0"
      ]
    },
    "796": {
      "op": "dup",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "now#0",
        "startTs#0",
        "startTs#0"
      ]
    },
    "797": {
      "op": "cover 2",
      "defined_out": [
        "now#0",
        "startTs#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "now#0",
        "startTs#0"
      ]
    },
    "799": {
      "op": "<=",
      "defined_out": [
        "now#0",
        "startTs#0",
        "tmp%0#1",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "tmp%0#1"
      ]
    },
    "800": {
      "op": "bz claim_after_if_else@8",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ]
    },
    "803": {
      "op": "intc_0 // 0",
      "defined_out": [
        "now#0",
        "startTs#0",
        "tokenId#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "vested#0"
      ]
    },
    "804": {
      "op": "frame_bury 3",
      "defined_out": [
        "now#0",
        "startTs#0",
        "tokenId#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ]
    },
    "806": {
      "block": "claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.vestedBySchedule@13",
      "stack_in": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "0"
      ]
    },
    "807": {
      "op": "bytec_2 // \"claimed_amount\"",
      "defined_out": [
        "\"claimed_amount\"",
        "0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "0",
        "\"claimed_amount\""
      ]
    },
    "808": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "809": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "maybe_value%0#1"
      ]
    },
    "810": {
      "op": "btoi",
      "defined_out": [
        "alreadyClaimed#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "alreadyClaimed#0"
      ]
    },
    "811": {
      "op": "dup",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "alreadyClaimed#0",
        "alreadyClaimed#0"
      ]
    },
    "812": {
      "op": "frame_bury 0",
      "defined_out": [
        "alreadyClaimed#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "alreadyClaimed#0"
      ]
    },
    "814": {
      "op": "frame_dig 3",
      "defined_out": [
        "alreadyClaimed#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "alreadyClaimed#0",
        "vested#0"
      ]
    },
    "816": {
      "op": "<",
      "defined_out": [
        "alreadyClaimed#0",
        "tmp%0#1",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "tmp%0#1"
      ]
    },
    "817": {
      "op": "bz claim_after_if_else@4",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ]
    },
    "820": {
      "op": "frame_dig 3",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "vested#0"
      ]
    },
    "822": {
      "op": "frame_dig 0",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "vested#0",
        "alreadyClaimed#0"
      ]
    },
    "824": {
      "op": "-",
      "defined_out": [
        "alreadyClaimed#0",
        "claimableAmount#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ]
    },
    "825": {
      "block": "claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.computeClaimable@5",
      "stack_in": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ],
      "op": "dup",
      "defined_out": [
        "claimableAmount#0",
        "claimableAmount#0 (copy)"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "claimableAmount#0 (copy)"
      ]
    },
    "826": {
      "error": "Nothing claimable yet",
      "op": "assert // Nothing claimable yet",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ]
    },
    "827": {
      "op": "itxn_begin"
    },
    "828": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "claimableAmount#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "0"
      ]
    },
    "829": {
      "op": "bytec 9 // \"beneficiary\"",
      "defined_out": [
        "\"beneficiary\"",
        "0",
        "claimableAmount#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "0",
        "\"beneficiary\""
      ]
    },
    "831": {
      "op": "app_global_get_ex",
      "defined_out": [
        "claimableAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "832": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "maybe_value%2#0"
      ]
    },
    "833": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ]
    },
    "835": {
      "op": "dup",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "claimableAmount#0 (copy)"
      ]
    },
    "836": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ]
    },
    "838": {
      "op": "frame_dig 4",
      "defined_out": [
        "claimableAmount#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "tokenId#0"
      ]
    },
    "840": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ]
    },
    "842": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "claimableAmount#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "4"
      ]
    },
    "843": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ]
    },
    "845": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "claimableAmount#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "1000"
      ]
    },
    "848": {
      "op": "itxn_field Fee",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ]
    },
    "850": {
      "op": "itxn_submit"
    },
    "851": {
      "op": "intc_0 // 0",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "0"
      ]
    },
    "852": {
      "op": "bytec_2 // \"claimed_amount\"",
      "defined_out": [
        "\"claimed_amount\"",
        "0",
        "claimableAmount#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "0",
        "\"claimed_amount\""
      ]
    },
    "853": {
      "op": "app_global_get_ex",
      "defined_out": [
        "claimableAmount#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "854": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "maybe_value%3#0"
      ]
    },
    "855": {
      "op": "btoi",
      "defined_out": [
        "claimableAmount#0",
        "tmp%4#0",
        "tokenId#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0",
        "tmp%4#0"
      ]
    },
    "856": {
      "op": "+",
      "defined_out": [
        "tokenId#0",
        "updatedClaimed#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "updatedClaimed#0"
      ]
    },
    "857": {
      "op": "itob",
      "defined_out": [
        "tokenId#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "val_as_bytes%0#0"
      ]
    },
    "858": {
      "op": "bytec_2 // \"claimed_amount\"",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "val_as_bytes%0#0",
        "\"claimed_amount\""
      ]
    },
    "859": {
      "op": "swap",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "\"claimed_amount\"",
        "val_as_bytes%0#0"
      ]
    },
    "860": {
      "op": "app_global_put",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ]
    },
    "861": {
      "retsub": true,
      "op": "retsub"
    },
    "862": {
      "block": "claim_after_if_else@4",
      "stack_in": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "claimableAmount#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "claimableAmount#0"
      ]
    },
    "863": {
      "op": "b claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.computeClaimable@5"
    },
    "866": {
      "block": "claim_after_if_else@8",
      "stack_in": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "0"
      ]
    },
    "867": {
      "op": "bytec 5 // \"period_secs\"",
      "defined_out": [
        "\"period_secs\"",
        "0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "0",
        "\"period_secs\""
      ]
    },
    "869": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "870": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "maybe_value%1#0"
      ]
    },
    "871": {
      "op": "btoi",
      "defined_out": [
        "periodSecs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodSecs#0"
      ]
    },
    "872": {
      "op": "dup",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodSecs#0",
        "periodSecs#0"
      ]
    },
    "873": {
      "op": "frame_bury 2",
      "defined_out": [
        "periodSecs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodSecs#0"
      ]
    },
    "875": {
      "op": "bnz claim_after_if_else@10",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ]
    },
    "878": {
      "op": "intc_0 // 0",
      "defined_out": [
        "periodSecs#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "vested#0"
      ]
    },
    "879": {
      "op": "frame_bury 3",
      "defined_out": [
        "periodSecs#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ]
    },
    "881": {
      "op": "b claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.vestedBySchedule@13"
    },
    "884": {
      "block": "claim_after_if_else@10",
      "stack_in": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "now#0"
      ]
    },
    "886": {
      "op": "frame_dig 6",
      "defined_out": [
        "now#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "now#0",
        "startTs#0"
      ]
    },
    "888": {
      "op": "-",
      "defined_out": [
        "elapsed#0",
        "now#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "elapsed#0"
      ]
    },
    "889": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "elapsed#0",
        "now#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "elapsed#0",
        "0"
      ]
    },
    "890": {
      "op": "swap",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "0",
        "elapsed#0"
      ]
    },
    "891": {
      "op": "frame_dig 2",
      "defined_out": [
        "0",
        "elapsed#0",
        "now#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "0",
        "elapsed#0",
        "periodSecs#0"
      ]
    },
    "893": {
      "op": "divw",
      "defined_out": [
        "now#0",
        "periodSecs#0",
        "periodsElapsed#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodsElapsed#0"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodsElapsed#0",
        "0"
      ]
    },
    "895": {
      "op": "bytec 7 // \"max_periods\"",
      "defined_out": [
        "\"max_periods\"",
        "0",
        "now#0",
        "periodSecs#0",
        "periodsElapsed#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodsElapsed#0",
        "0",
        "\"max_periods\""
      ]
    },
    "897": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#1",
        "now#0",
        "periodSecs#0",
        "periodsElapsed#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodsElapsed#0",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "898": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodsElapsed#0",
        "maybe_value%2#1"
      ]
    },
    "899": {
      "op": "btoi",
      "defined_out": [
        "maxPeriods#0",
        "now#0",
        "periodSecs#0",
        "periodsElapsed#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodsElapsed#0",
        "maxPeriods#0"
      ]
    },
    "900": {
      "op": "dup2",
      "defined_out": [
        "maxPeriods#0",
        "maxPeriods#0 (copy)",
        "now#0",
        "periodSecs#0",
        "periodsElapsed#0",
        "periodsElapsed#0 (copy)",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodsElapsed#0",
        "maxPeriods#0",
        "periodsElapsed#0 (copy)",
        "maxPeriods#0 (copy)"
      ]
    },
    "901": {
      "op": ">",
      "defined_out": [
        "maxPeriods#0",
        "now#0",
        "periodSecs#0",
        "periodsElapsed#0",
        "startTs#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "periodsElapsed#0",
        "maxPeriods#0",
        "tmp%2#1"
      ]
    },
    "902": {
      "op": "select",
      "defined_out": [
        "cappedPeriods#0",
        "now#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0"
      ]
    },
    "903": {
      "op": "intc_0 // 0",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "0"
      ]
    },
    "904": {
      "op": "bytec 6 // \"payout_amount\"",
      "defined_out": [
        "\"payout_amount\"",
        "0",
        "cappedPeriods#0",
        "now#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "0",
        "\"payout_amount\""
      ]
    },
    "906": {
      "op": "app_global_get_ex",
      "defined_out": [
        "cappedPeriods#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "now#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "907": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "maybe_value%3#0"
      ]
    },
    "908": {
      "op": "btoi",
      "defined_out": [
        "cappedPeriods#0",
        "now#0",
        "payoutAmount#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "payoutAmount#0"
      ]
    },
    "909": {
      "op": "intc_0 // 0",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "payoutAmount#0",
        "0"
      ]
    },
    "910": {
      "op": "bytec 8 // \"deposit_amount\"",
      "defined_out": [
        "\"deposit_amount\"",
        "0",
        "cappedPeriods#0",
        "now#0",
        "payoutAmount#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "payoutAmount#0",
        "0",
        "\"deposit_amount\""
      ]
    },
    "912": {
      "op": "app_global_get_ex",
      "defined_out": [
        "cappedPeriods#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "now#0",
        "payoutAmount#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "payoutAmount#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "913": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "payoutAmount#0",
        "maybe_value%4#0"
      ]
    },
    "914": {
      "op": "btoi",
      "defined_out": [
        "cappedPeriods#0",
        "depositAmount#0",
        "now#0",
        "payoutAmount#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "cappedPeriods#0",
        "payoutAmount#0",
        "depositAmount#0"
      ]
    },
    "915": {
      "op": "cover 2",
      "defined_out": [
        "cappedPeriods#0",
        "depositAmount#0",
        "now#0",
        "payoutAmount#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0",
        "cappedPeriods#0",
        "payoutAmount#0"
      ]
    },
    "917": {
      "op": "mulw",
      "defined_out": [
        "candidateHi#0",
        "candidateLo#0",
        "depositAmount#0",
        "now#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0",
        "candidateHi#0",
        "candidateLo#0"
      ]
    },
    "918": {
      "op": "frame_bury 1",
      "defined_out": [
        "candidateHi#0",
        "candidateLo#0",
        "depositAmount#0",
        "now#0",
        "periodSecs#0",
        "startTs#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0",
        "candidateHi#0"
      ]
    },
    "920": {
      "op": "bz claim_after_if_else@12",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0"
      ]
    },
    "923": {
      "op": "frame_bury 3",
      "defined_out": [
        "candidateLo#0",
        "now#0",
        "periodSecs#0",
        "startTs#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ]
    },
    "925": {
      "op": "b claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.vestedBySchedule@13"
    },
    "928": {
      "block": "claim_after_if_else@12",
      "stack_in": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "candidateLo#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0",
        "candidateLo#0"
      ]
    },
    "930": {
      "op": "dup",
      "defined_out": [
        "candidateLo#0",
        "candidateLo#0 (copy)"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0",
        "candidateLo#0",
        "candidateLo#0 (copy)"
      ]
    },
    "931": {
      "op": "dig 2",
      "defined_out": [
        "candidateLo#0",
        "candidateLo#0 (copy)",
        "depositAmount#0",
        "depositAmount#0 (copy)"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0",
        "candidateLo#0",
        "candidateLo#0 (copy)",
        "depositAmount#0 (copy)"
      ]
    },
    "933": {
      "op": ">",
      "defined_out": [
        "candidateLo#0",
        "depositAmount#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0",
        "candidateLo#0",
        "tmp%4#1"
      ]
    },
    "934": {
      "op": "swap",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "depositAmount#0",
        "tmp%4#1",
        "candidateLo#0"
      ]
    },
    "935": {
      "op": "cover 2",
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "candidateLo#0",
        "depositAmount#0",
        "tmp%4#1"
      ]
    },
    "937": {
      "op": "select",
      "defined_out": [
        "candidateLo#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0",
        "vested#0"
      ]
    },
    "938": {
      "op": "frame_bury 3",
      "defined_out": [
        "candidateLo#0",
        "vested#0"
      ],
      "stack_out": [
        "alreadyClaimed#0",
        "candidateLo#0",
        "periodSecs#0",
        "vested#0",
        "tokenId#0",
        "now#0",
        "startTs#0"
      ]
    },
    "940": {
      "op": "b claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.vestedBySchedule@13"
    }
  }
}