#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4 1000
    bytecblock 0x0000000000000000 "token_id" "start_ts" "period_secs" "payout_amount" "max_periods" "deposit_amount" "claimed_amount" "beneficiary" "flux_oracle_app" "registry_app_id" "depositor" 0x151f7c75 "fee_bps" "treasury" "nominated_asset_id"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:26-27
    // @contract({ name: "waypoint-linear", avmVersion: 11 })
    // export class WaypointLinear extends Contract {
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0x917c48b6 0x9b932c59 0xc39b0dc4 0xf1577726 // method "createApplication(uint64,uint64)void", method "initApp(pay)void", method "createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void", method "claim()void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_initApp_route@4 main_createRoute_route@5 main_claim_route@6

main_after_if_else@10:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:26-27
    // @contract({ name: "waypoint-linear", avmVersion: 11 })
    // export class WaypointLinear extends Contract {
    intc_0 // 0
    return

main_claim_route@6:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:202
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub claim
    intc_1 // 1
    return

main_createRoute_route@5:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:80
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:26-27
    // @contract({ name: "waypoint-linear", avmVersion: 11 })
    // export class WaypointLinear extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:80
    // @abimethod({ allowActions: "NoOp" })
    callsub createRoute
    intc_1 // 1
    return

main_initApp_route@4:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:61
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:26-27
    // @contract({ name: "waypoint-linear", avmVersion: 11 })
    // export class WaypointLinear extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:61
    // @abimethod({ allowActions: "NoOp" })
    callsub initApp
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:47
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:26-27
    // @contract({ name: "waypoint-linear", avmVersion: 11 })
    // export class WaypointLinear extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:47
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.createApplication(registryAppId: uint64, tokenId: uint64) -> void:
createApplication:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:47-48
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    // public createApplication(registryAppId: uint64, tokenId: uint64): void {
    proto 2 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:30
    // contract_version = GlobalState<UintN64>();
    pushbytess "contract_version" 0x00000000000003e8 // "contract_version", 0x00000000000003e8
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:49
    // this.contract_version.value = new UintN64(CONTRACT_VERSION);
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:50
    // this.registry_app_id.value = new UintN64(registryAppId);
    frame_dig -2
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:33
    // registry_app_id = GlobalState<UintN64>();
    bytec 10 // "registry_app_id"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:50
    // this.registry_app_id.value = new UintN64(registryAppId);
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:51
    // this.token_id.value = new UintN64(tokenId);
    frame_dig -1
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:34
    // token_id = GlobalState<UintN64>();
    bytec_1 // "token_id"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:51
    // this.token_id.value = new UintN64(tokenId);
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:40
    // start_ts = GlobalState<UintN64>();
    bytec_2 // "start_ts"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:53
    // this.start_ts.value = new UintN64(0);
    bytec_0 // 0x0000000000000000
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:41
    // period_secs = GlobalState<UintN64>();
    bytec_3 // "period_secs"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:54
    // this.period_secs.value = new UintN64(0);
    bytec_0 // 0x0000000000000000
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:42
    // payout_amount = GlobalState<UintN64>();
    bytec 4 // "payout_amount"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:55
    // this.payout_amount.value = new UintN64(0);
    bytec_0 // 0x0000000000000000
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:43
    // max_periods = GlobalState<UintN64>();
    bytec 5 // "max_periods"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:56
    // this.max_periods.value = new UintN64(0);
    bytec_0 // 0x0000000000000000
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:44
    // deposit_amount = GlobalState<UintN64>(); // total intended to stream
    bytec 6 // "deposit_amount"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:57
    // this.deposit_amount.value = new UintN64(0);
    bytec_0 // 0x0000000000000000
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:45
    // claimed_amount = GlobalState<UintN64>();
    bytec 7 // "claimed_amount"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:58
    // this.claimed_amount.value = new UintN64(0);
    bytec_0 // 0x0000000000000000
    app_global_put
    retsub


// smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.initApp(mbrTxn: uint64) -> void:
initApp:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:61-62
    // @abimethod({ allowActions: "NoOp" })
    // public initApp(mbrTxn: gtxn.PaymentTxn): void {
    proto 1 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:63-66
    // assertMatch(mbrTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: 400_000,
    // });
    frame_dig -1
    gtxns Receiver
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:64
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:63-66
    // assertMatch(mbrTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: 400_000,
    // });
    ==
    bz initApp_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:65
    // amount: 400_000,
    pushint 400000 // 400000
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:63-66
    // assertMatch(mbrTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: 400_000,
    // });
    ==
    bz initApp_bool_false@3
    intc_1 // 1

initApp_bool_merge@4:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:63-66
    // assertMatch(mbrTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: 400_000,
    // });
    assert // assert target is match for conditions
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:68-76
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: Asset(this.token_id.value.native),
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:70
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:71
    // assetReceiver: Global.currentApplicationAddress,
    dup
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:34
    // token_id = GlobalState<UintN64>();
    intc_0 // 0
    bytec_1 // "token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:72
    // xferAsset: Asset(this.token_id.value.native),
    btoi
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:73
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:68-75
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: Asset(this.token_id.value.native),
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/waypoint_linear/config.algo.ts:3
    // export const STANDARD_TXN_FEE: uint64 = 1000;
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:68-76
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: Asset(this.token_id.value.native),
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit();
    itxn_submit
    retsub

initApp_bool_false@3:
    intc_0 // 0
    b initApp_bool_merge@4


// smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.createRoute(beneficiary: bytes, startTs: uint64, periodSecs: uint64, payoutAmount: uint64, maxPeriods: uint64, depositAmount: uint64, tokenId: uint64, tokenTransfer: uint64) -> void:
createRoute:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:80-90
    // @abimethod({ allowActions: "NoOp" })
    // public createRoute(
    //   beneficiary: Account,
    //   startTs: uint64,
    //   periodSecs: uint64,
    //   payoutAmount: uint64,
    //   maxPeriods: uint64,
    //   depositAmount: uint64,
    //   tokenId: uint64,
    //   tokenTransfer: gtxn.AssetTransferTxn
    // ): void {
    proto 8 0
    intc_0 // 0
    pushbytes ""
    dupn 3
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:91
    // assert(periodSecs > 0, "Period seconds must be greater than 0");
    frame_dig -6
    assert // Period seconds must be greater than 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:92
    // assert(maxPeriods > 0, "Max periods must be greater than 0");
    frame_dig -4
    assert // Max periods must be greater than 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:93
    // assert(payoutAmount > 0, "Payout amount must be greater than 0");
    frame_dig -5
    assert // Payout amount must be greater than 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:94
    // assert(depositAmount > 0, "Deposit amount must be greater than 0");
    frame_dig -3
    assert // Deposit amount must be greater than 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:95
    // assert(tokenId > 0, "Token ID must be greater than 0");
    frame_dig -2
    assert // Token ID must be greater than 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:97-101
    // assertMatch(tokenTransfer, {
    //   xferAsset: Asset(tokenId),
    //   assetAmount: depositAmount,
    //   assetReceiver: Global.currentApplicationAddress,
    // });
    frame_dig -1
    gtxns XferAsset
    frame_dig -2
    ==
    bz createRoute_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig -3
    ==
    bz createRoute_bool_false@4
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:100
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:97-101
    // assertMatch(tokenTransfer, {
    //   xferAsset: Asset(tokenId),
    //   assetAmount: depositAmount,
    //   assetReceiver: Global.currentApplicationAddress,
    // });
    ==
    bz createRoute_bool_false@4
    intc_1 // 1

createRoute_bool_merge@5:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:97-101
    // assertMatch(tokenTransfer, {
    //   xferAsset: Asset(tokenId),
    //   assetAmount: depositAmount,
    //   assetReceiver: Global.currentApplicationAddress,
    // });
    assert // assert target is match for conditions
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:103
    // this.token_id.value = new UintN64(tokenId);
    frame_dig -2
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:34
    // token_id = GlobalState<UintN64>();
    bytec_1 // "token_id"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:103
    // this.token_id.value = new UintN64(tokenId);
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:104
    // this.start_ts.value = new UintN64(startTs); // DEBUG: subtract time to allow immediate claim
    frame_dig -7
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:40
    // start_ts = GlobalState<UintN64>();
    bytec_2 // "start_ts"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:104
    // this.start_ts.value = new UintN64(startTs); // DEBUG: subtract time to allow immediate claim
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:105
    // this.period_secs.value = new UintN64(periodSecs);
    frame_dig -6
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:41
    // period_secs = GlobalState<UintN64>();
    bytec_3 // "period_secs"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:105
    // this.period_secs.value = new UintN64(periodSecs);
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:106
    // this.payout_amount.value = new UintN64(payoutAmount);
    frame_dig -5
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:42
    // payout_amount = GlobalState<UintN64>();
    bytec 4 // "payout_amount"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:106
    // this.payout_amount.value = new UintN64(payoutAmount);
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:107
    // this.max_periods.value = new UintN64(maxPeriods);
    frame_dig -4
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:43
    // max_periods = GlobalState<UintN64>();
    bytec 5 // "max_periods"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:107
    // this.max_periods.value = new UintN64(maxPeriods);
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:108
    // this.deposit_amount.value = new UintN64(depositAmount);
    frame_dig -3
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:44
    // deposit_amount = GlobalState<UintN64>(); // total intended to stream
    bytec 6 // "deposit_amount"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:108
    // this.deposit_amount.value = new UintN64(depositAmount);
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:39
    // beneficiary = GlobalState<Address>();
    bytec 8 // "beneficiary"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:109
    // this.beneficiary.value = new Address(beneficiary);
    frame_dig -8
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:38
    // depositor = GlobalState<Address>();
    bytec 11 // "depositor"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:110
    // this.depositor.value = new Address(op.Txn.sender);
    txn Sender
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:33
    // registry_app_id = GlobalState<UintN64>();
    intc_0 // 0
    bytec 10 // "registry_app_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:113
    // const registryApp: Application = Application(this.registry_app_id.value.native);
    btoi
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:114-131
    // abiCall(WaypointRegistryStub.prototype.registerRoute, {
    //   appId: registryApp.id,
    //   args: [
    //     Global.currentApplicationId.id,
    //     this.token_id.value.native,
    //     this.depositor.value.native,
    //     this.beneficiary.value.native,
    //     this.start_ts.value.native,
    //     this.period_secs.value.native,
    //     this.payout_amount.value.native,
    //     this.max_periods.value.native,
    //     this.deposit_amount.value.native,
    //   ],
    //   sender: Global.currentApplicationAddress,
    //   fee: REGISTRY_FEE,
    //   apps: [registryApp],
    //   accounts: [op.Txn.sender, beneficiary],
    // });
    itxn_begin
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:127
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:38
    // depositor = GlobalState<Address>();
    intc_0 // 0
    bytec 11 // "depositor"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:39
    // beneficiary = GlobalState<Address>();
    intc_0 // 0
    bytec 8 // "beneficiary"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:117
    // Global.currentApplicationId.id,
    global CurrentApplicationID
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:34
    // token_id = GlobalState<UintN64>();
    intc_0 // 0
    bytec_1 // "token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:118
    // this.token_id.value.native,
    btoi
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:40
    // start_ts = GlobalState<UintN64>();
    intc_0 // 0
    bytec_2 // "start_ts"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:121
    // this.start_ts.value.native,
    btoi
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:41
    // period_secs = GlobalState<UintN64>();
    intc_0 // 0
    bytec_3 // "period_secs"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:122
    // this.period_secs.value.native,
    btoi
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:42
    // payout_amount = GlobalState<UintN64>();
    intc_0 // 0
    bytec 4 // "payout_amount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:123
    // this.payout_amount.value.native,
    btoi
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:43
    // max_periods = GlobalState<UintN64>();
    intc_0 // 0
    bytec 5 // "max_periods"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:124
    // this.max_periods.value.native,
    btoi
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:44
    // deposit_amount = GlobalState<UintN64>(); // total intended to stream
    intc_0 // 0
    bytec 6 // "deposit_amount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:125
    // this.deposit_amount.value.native,
    btoi
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:114-131
    // abiCall(WaypointRegistryStub.prototype.registerRoute, {
    //   appId: registryApp.id,
    //   args: [
    //     Global.currentApplicationId.id,
    //     this.token_id.value.native,
    //     this.depositor.value.native,
    //     this.beneficiary.value.native,
    //     this.start_ts.value.native,
    //     this.period_secs.value.native,
    //     this.payout_amount.value.native,
    //     this.max_periods.value.native,
    //     this.deposit_amount.value.native,
    //   ],
    //   sender: Global.currentApplicationAddress,
    //   fee: REGISTRY_FEE,
    //   apps: [registryApp],
    //   accounts: [op.Txn.sender, beneficiary],
    // });
    pushbytes 0xf7199eeb // method "registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void"
    itxn_field ApplicationArgs
    uncover 6
    itxn_field ApplicationArgs
    uncover 5
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    pushbytes 0x02
    itxn_field ApplicationArgs
    uncover 4
    itxn_field ApplicationArgs
    uncover 3
    itxn_field ApplicationArgs
    uncover 2
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    swap
    itxn_field Accounts
    itxn_field Accounts
    dig 1
    itxn_field Applications
    itxn_field Sender
    dup
    itxn_field ApplicationID
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:114-131
    // abiCall(WaypointRegistryStub.prototype.registerRoute, {
    //   appId: registryApp.id,
    //   args: [
    //     Global.currentApplicationId.id,
    //     this.token_id.value.native,
    //     this.depositor.value.native,
    //     this.beneficiary.value.native,
    //     this.start_ts.value.native,
    //     this.period_secs.value.native,
    //     this.payout_amount.value.native,
    //     this.max_periods.value.native,
    //     this.deposit_amount.value.native,
    //   ],
    //   sender: Global.currentApplicationAddress,
    //   fee: REGISTRY_FEE,
    //   apps: [registryApp],
    //   accounts: [op.Txn.sender, beneficiary],
    // });
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/waypoint_linear/config.algo.ts:4
    // export const REGISTRY_FEE : uint64 = 20_000;
    pushint 20000 // 20000
    itxn_field Fee
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:114-131
    // abiCall(WaypointRegistryStub.prototype.registerRoute, {
    //   appId: registryApp.id,
    //   args: [
    //     Global.currentApplicationId.id,
    //     this.token_id.value.native,
    //     this.depositor.value.native,
    //     this.beneficiary.value.native,
    //     this.start_ts.value.native,
    //     this.period_secs.value.native,
    //     this.payout_amount.value.native,
    //     this.max_periods.value.native,
    //     this.deposit_amount.value.native,
    //   ],
    //   sender: Global.currentApplicationAddress,
    //   fee: REGISTRY_FEE,
    //   apps: [registryApp],
    //   accounts: [op.Txn.sender, beneficiary],
    // });
    itxn_submit
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:132-138
    // const params = abiCall(WaypointRegistryStub.prototype.getParams, {
    //   appId: registryApp.id,
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [registryApp],
    //   accounts: [op.Txn.sender, beneficiary],
    // }).returnValue;
    itxn_begin
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:134
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:137
    // accounts: [op.Txn.sender, beneficiary],
    txn Sender
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:132-138
    // const params = abiCall(WaypointRegistryStub.prototype.getParams, {
    //   appId: registryApp.id,
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [registryApp],
    //   accounts: [op.Txn.sender, beneficiary],
    // }).returnValue;
    pushbytes 0x8de40c28 // method "getParams()(uint64,address,uint64,uint64)"
    itxn_field ApplicationArgs
    itxn_field Accounts
    frame_dig -8
    itxn_field Accounts
    dig 1
    itxn_field Applications
    itxn_field Sender
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/waypoint_linear/config.algo.ts:3
    // export const STANDARD_TXN_FEE: uint64 = 1000;
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:132-138
    // const params = abiCall(WaypointRegistryStub.prototype.getParams, {
    //   appId: registryApp.id,
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [registryApp],
    //   accounts: [op.Txn.sender, beneficiary],
    // }).returnValue;
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec 12 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:140
    // this.fee_bps.value = params.fee_bps;
    dup
    extract 4 8
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:31
    // fee_bps = GlobalState<UintN64>();
    bytec 13 // "fee_bps"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:140
    // this.fee_bps.value = params.fee_bps;
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:141
    // this.treasury.value = params.treasury.native;
    dup
    extract 12 32
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:32
    // treasury = GlobalState<Account>();
    bytec 14 // "treasury"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:141
    // this.treasury.value = params.treasury.native;
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:142
    // this.flux_oracle_app.value = Application(params.flux_oracle_app_id.native);
    dup
    pushint 44 // 44
    extract_uint64
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:29
    // flux_oracle_app = GlobalState<Application>();
    bytec 9 // "flux_oracle_app"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:142
    // this.flux_oracle_app.value = Application(params.flux_oracle_app_id.native);
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:143
    // this.nominated_asset_id.value = params.nominated_asset_id;
    extract 52 8
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:35
    // nominated_asset_id = GlobalState<UintN64>();
    bytec 15 // "nominated_asset_id"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:143
    // this.nominated_asset_id.value = params.nominated_asset_id;
    swap
    app_global_put
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:146
    // let userTier: UintN64 = new UintN64(0);
    bytec_0 // 0x0000000000000000
    frame_bury 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:29
    // flux_oracle_app = GlobalState<Application>();
    intc_0 // 0
    bytec 9 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:147
    // if (this.flux_oracle_app.value.id !== 0) {
    bz createRoute_after_if_else@10
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:148-155
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new arc4.Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue;
    itxn_begin
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:29
    // flux_oracle_app = GlobalState<Application>();
    intc_0 // 0
    bytec 9 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:151
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:29
    // flux_oracle_app = GlobalState<Application>();
    intc_0 // 0
    bytec 9 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:154
    // accounts: [op.Txn.sender],
    txn Sender
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:150
    // args: [new arc4.Address(op.Txn.sender)],
    dup
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:148-155
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new arc4.Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue;
    pushbytes 0xd4d7aa5c // method "getUserTier(address)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field Accounts
    itxn_field Applications
    itxn_field Sender
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/waypoint_linear/config.algo.ts:3
    // export const STANDARD_TXN_FEE: uint64 = 1000;
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:148-155
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new arc4.Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue;
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    frame_bury 0
    extract 0 4
    bytec 12 // 0x151f7c75
    ==
    assert // Bytes has valid prefix

createRoute_after_if_else@10:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:158
    // const calculatedFee = this.computeFees(depositAmount, userTier.native, tokenId);
    frame_dig 0
    btoi
    frame_bury 4
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:31
    // fee_bps = GlobalState<UintN64>();
    intc_0 // 0
    bytec 13 // "fee_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:172
    // const initialFee: uint64 = this.fee_bps.value.native;
    btoi
    frame_bury 3
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:35
    // nominated_asset_id = GlobalState<UintN64>();
    intc_0 // 0
    bytec 15 // "nominated_asset_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:175
    // if (tokenId === this.nominated_asset_id.value.native) {
    btoi
    frame_dig -2
    ==
    bz createRoute_else_body@27
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:176
    // if (userTier === 1) {
    frame_dig 4
    intc_1 // 1
    ==
    bz createRoute_else_body@17
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:177
    // effectiveFeeBps = 20;
    pushint 20 // 20
    frame_bury 1

createRoute_after_if_else@39:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:197
    // const [feeHi, feeLo] = mulw(depositAmount, effectiveFeeBps);
    frame_dig -3
    frame_dig 1
    mulw
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:198
    // const fee: uint64 = divw(feeHi, feeLo, 10_000);
    pushint 10000 // 10000
    divw
    dup
    frame_bury 2
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:159
    // if (calculatedFee > 0) {
    bz createRoute_after_if_else@13
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:160-167
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.treasury.value,
    //     assetAmount: calculatedFee,
    //     xferAsset: Asset(tokenId),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:32
    // treasury = GlobalState<Account>();
    intc_0 // 0
    bytec 14 // "treasury"
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -2
    itxn_field XferAsset
    frame_dig 2
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:160-166
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.treasury.value,
    //     assetAmount: calculatedFee,
    //     xferAsset: Asset(tokenId),
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/waypoint_linear/config.algo.ts:3
    // export const STANDARD_TXN_FEE: uint64 = 1000;
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:160-167
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.treasury.value,
    //     assetAmount: calculatedFee,
    //     xferAsset: Asset(tokenId),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit();
    itxn_submit

createRoute_after_if_else@13:
    retsub

createRoute_else_body@17:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:178
    // } else if (userTier === 2) {
    frame_dig 4
    pushint 2 // 2
    ==
    bz createRoute_else_body@19
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:179
    // effectiveFeeBps = 15;
    pushint 15 // 15
    frame_bury 1
    b createRoute_after_if_else@39

createRoute_else_body@19:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:180
    // } else if (userTier === 3) {
    frame_dig 4
    pushint 3 // 3
    ==
    bz createRoute_else_body@21
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:181
    // effectiveFeeBps = 12;
    pushint 12 // 12
    frame_bury 1
    b createRoute_after_if_else@39

createRoute_else_body@21:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:182
    // } else if (userTier >= 4) {
    frame_dig 4
    intc_2 // 4
    >=
    frame_dig 3
    frame_bury 1
    bz createRoute_after_if_else@39
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:183
    // effectiveFeeBps = 10;
    pushint 10 // 10
    frame_bury 1
    b createRoute_after_if_else@39

createRoute_else_body@27:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:186
    // if (userTier === 1) {
    frame_dig 4
    intc_1 // 1
    ==
    bz createRoute_else_body@29
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:187
    // effectiveFeeBps = 45;
    pushint 45 // 45
    frame_bury 1
    b createRoute_after_if_else@39

createRoute_else_body@29:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:188
    // } else if (userTier === 2) {
    frame_dig 4
    pushint 2 // 2
    ==
    bz createRoute_else_body@31
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:189
    // effectiveFeeBps = 38;
    pushint 38 // 38
    frame_bury 1
    b createRoute_after_if_else@39

createRoute_else_body@31:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:190
    // } else if (userTier === 3) {
    frame_dig 4
    pushint 3 // 3
    ==
    bz createRoute_else_body@33
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:191
    // effectiveFeeBps = 30;
    pushint 30 // 30
    frame_bury 1
    b createRoute_after_if_else@39

createRoute_else_body@33:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:192
    // } else if (userTier >= 4) {
    frame_dig 4
    intc_2 // 4
    >=
    frame_dig 3
    frame_bury 1
    bz createRoute_after_if_else@39
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:193
    // effectiveFeeBps = 20;
    pushint 20 // 20
    frame_bury 1
    b createRoute_after_if_else@39

createRoute_bool_false@4:
    intc_0 // 0
    b createRoute_bool_merge@5


// smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.claim() -> void:
claim:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:202-203
    // @abimethod({ allowActions: "NoOp" })
    // public claim(): void {
    proto 0 0
    pushbytes ""
    dupn 3
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:204
    // assert(op.Txn.sender === this.beneficiary.value.native, "Only beneficiary can claim");
    txn Sender
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:39
    // beneficiary = GlobalState<Address>();
    intc_0 // 0
    bytec 8 // "beneficiary"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:204
    // assert(op.Txn.sender === this.beneficiary.value.native, "Only beneficiary can claim");
    ==
    assert // Only beneficiary can claim
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:34
    // token_id = GlobalState<UintN64>();
    intc_0 // 0
    bytec_1 // "token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:205
    // const tokenId = this.token_id.value.native;
    btoi
    dup
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:206
    // assert(tokenId > 0, "Route not initialized");
    assert // Route not initialized
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:208
    // const now = Global.latestTimestamp;
    global LatestTimestamp
    dup
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:40
    // start_ts = GlobalState<UintN64>();
    intc_0 // 0
    bytec_2 // "start_ts"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:226
    // const startTs: uint64 = this.start_ts.value.native;
    btoi
    dup
    cover 2
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:227
    // if (now <= startTs) {
    <=
    bz claim_after_if_else@8
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:228
    // return 0;
    intc_0 // 0
    frame_bury 3

claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.vestedBySchedule@13:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:45
    // claimed_amount = GlobalState<UintN64>();
    intc_0 // 0
    bytec 7 // "claimed_amount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:256
    // const alreadyClaimed: uint64 = this.claimed_amount.value.native;
    btoi
    dup
    frame_bury 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:257
    // if (vested > alreadyClaimed) {
    frame_dig 3
    <
    bz claim_after_if_else@4
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:258
    // return vested - alreadyClaimed;
    frame_dig 3
    frame_dig 0
    -

claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.computeClaimable@5:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:210
    // assert(claimableAmount > 0, "Nothing claimable yet");
    dup
    assert // Nothing claimable yet
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:212-219
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(tokenId),
    //     assetAmount: claimableAmount,
    //     assetReceiver: this.beneficiary.value.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:39
    // beneficiary = GlobalState<Address>();
    intc_0 // 0
    bytec 8 // "beneficiary"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field AssetReceiver
    dup
    itxn_field AssetAmount
    frame_dig 4
    itxn_field XferAsset
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:212-218
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(tokenId),
    //     assetAmount: claimableAmount,
    //     assetReceiver: this.beneficiary.value.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/waypoint_linear/config.algo.ts:3
    // export const STANDARD_TXN_FEE: uint64 = 1000;
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:212-219
    // itxn
    //   .assetTransfer({
    //     xferAsset: Asset(tokenId),
    //     assetAmount: claimableAmount,
    //     assetReceiver: this.beneficiary.value.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit();
    itxn_submit
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:45
    // claimed_amount = GlobalState<UintN64>();
    intc_0 // 0
    bytec 7 // "claimed_amount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:221
    // const updatedClaimed: uint64 = this.claimed_amount.value.native + claimableAmount;
    btoi
    +
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:222
    // this.claimed_amount.value = new UintN64(updatedClaimed);
    itob
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:45
    // claimed_amount = GlobalState<UintN64>();
    bytec 7 // "claimed_amount"
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:222
    // this.claimed_amount.value = new UintN64(updatedClaimed);
    swap
    app_global_put
    retsub

claim_after_if_else@4:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:261
    // return 0;
    intc_0 // 0
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:209
    // const claimableAmount = this.computeClaimable(now);
    b claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.computeClaimable@5

claim_after_if_else@8:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:41
    // period_secs = GlobalState<UintN64>();
    intc_0 // 0
    bytec_3 // "period_secs"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:231
    // const periodSecs: uint64 = this.period_secs.value.native;
    btoi
    dup
    frame_bury 2
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:232
    // if (periodSecs === 0) {
    bnz claim_after_if_else@10
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:233
    // return 0;
    intc_0 // 0
    frame_bury 3
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:255
    // const vested = this.vestedBySchedule(now);
    b claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.vestedBySchedule@13

claim_after_if_else@10:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:236
    // const elapsed: uint64 = now - startTs;
    frame_dig 5
    frame_dig 6
    -
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:237
    // const periodsElapsed: uint64 = divw(0, elapsed, periodSecs);
    intc_0 // 0
    swap
    frame_dig 2
    divw
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:43
    // max_periods = GlobalState<UintN64>();
    intc_0 // 0
    bytec 5 // "max_periods"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:239
    // const maxPeriods: uint64 = this.max_periods.value.native;
    btoi
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:240
    // const cappedPeriods: uint64 = periodsElapsed > maxPeriods ? maxPeriods : periodsElapsed;
    dup2
    >
    select
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:42
    // payout_amount = GlobalState<UintN64>();
    intc_0 // 0
    bytec 4 // "payout_amount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:242
    // const payoutAmount: uint64 = this.payout_amount.value.native;
    btoi
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:44
    // deposit_amount = GlobalState<UintN64>(); // total intended to stream
    intc_0 // 0
    bytec 6 // "deposit_amount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:243
    // const depositAmount: uint64 = this.deposit_amount.value.native;
    btoi
    cover 2
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:244
    // const [candidateHi, candidateLo] = mulw(payoutAmount, cappedPeriods);
    mulw
    frame_bury 1
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:246
    // if (candidateHi > 0) {
    bz claim_after_if_else@12
    frame_bury 3
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:255
    // const vested = this.vestedBySchedule(now);
    b claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.vestedBySchedule@13

claim_after_if_else@12:
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:251
    // return vestedCandidate > depositAmount ? depositAmount : vestedCandidate;
    frame_dig 1
    dup
    dig 2
    >
    swap
    cover 2
    select
    frame_bury 3
    // smart_contracts/waypoint_linear/waypoint-linear.algo.ts:255
    // const vested = this.vestedBySchedule(now);
    b claim_after_inlined_smart_contracts/waypoint_linear/waypoint-linear.algo.ts::WaypointLinear.vestedBySchedule@13
