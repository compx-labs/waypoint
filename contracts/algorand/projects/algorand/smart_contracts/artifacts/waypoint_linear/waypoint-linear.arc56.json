{
    "name": "waypoint-linear",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "uint64",
                    "name": "registryAppId"
                },
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initApp",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrTxn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createRoute",
            "args": [
                {
                    "type": "account",
                    "name": "beneficiary"
                },
                {
                    "type": "uint64",
                    "name": "startTs"
                },
                {
                    "type": "uint64",
                    "name": "periodSecs"
                },
                {
                    "type": "uint64",
                    "name": "payoutAmount"
                },
                {
                    "type": "uint64",
                    "name": "maxPeriods"
                },
                {
                    "type": "uint64",
                    "name": "depositAmount"
                },
                {
                    "type": "uint64",
                    "name": "tokenId"
                },
                {
                    "type": "axfer",
                    "name": "tokenTransfer"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 14
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "flux_oracle_app": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Zmx1eF9vcmFjbGVfYXBw"
                },
                "contract_version": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Y29udHJhY3RfdmVyc2lvbg=="
                },
                "fee_bps": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "ZmVlX2Jwcw=="
                },
                "treasury": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "dHJlYXN1cnk="
                },
                "registry_app_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "cmVnaXN0cnlfYXBwX2lk"
                },
                "token_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "dG9rZW5faWQ="
                },
                "nominated_asset_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bm9taW5hdGVkX2Fzc2V0X2lk"
                },
                "depositor": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "ZGVwb3NpdG9y"
                },
                "beneficiary": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YmVuZWZpY2lhcnk="
                },
                "start_ts": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "c3RhcnRfdHM="
                },
                "period_secs": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "cGVyaW9kX3NlY3M="
                },
                "payout_amount": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "cGF5b3V0X2Ftb3VudA=="
                },
                "max_periods": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bWF4X3BlcmlvZHM="
                },
                "deposit_amount": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "ZGVwb3NpdF9hbW91bnQ="
                },
                "claimed_amount": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Y2xhaW1lZF9hbW91bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        718,
                        815
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        492
                    ],
                    "errorMessage": "Deposit amount must be greater than 0"
                },
                {
                    "pc": [
                        486
                    ],
                    "errorMessage": "Max periods must be greater than 0"
                },
                {
                    "pc": [
                        1102
                    ],
                    "errorMessage": "Nothing claimable yet"
                },
                {
                    "pc": [
                        245,
                        257,
                        309,
                        331
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1055
                    ],
                    "errorMessage": "Only beneficiary can claim"
                },
                {
                    "pc": [
                        489
                    ],
                    "errorMessage": "Payout amount must be greater than 0"
                },
                {
                    "pc": [
                        483
                    ],
                    "errorMessage": "Period seconds must be greater than 0"
                },
                {
                    "pc": [
                        1062
                    ],
                    "errorMessage": "Route not initialized"
                },
                {
                    "pc": [
                        495
                    ],
                    "errorMessage": "Token ID must be greater than 0"
                },
                {
                    "pc": [
                        443,
                        901
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        335
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        248,
                        260,
                        312
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        451,
                        549,
                        558,
                        563,
                        570,
                        576,
                        582,
                        589,
                        596,
                        603,
                        755,
                        764,
                        771,
                        825,
                        833,
                        907,
                        1053,
                        1059,
                        1069,
                        1085,
                        1108,
                        1129,
                        1145,
                        1173,
                        1182,
                        1188
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        300
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        322
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAAEE6AcmEAgAAAAAAAAAAAh0b2tlbl9pZAhzdGFydF90cwtwZXJpb2Rfc2Vjcw1wYXlvdXRfYW1vdW50C21heF9wZXJpb2RzDmRlcG9zaXRfYW1vdW50DmNsYWltZWRfYW1vdW50C2JlbmVmaWNpYXJ5D2ZsdXhfb3JhY2xlX2FwcA9yZWdpc3RyeV9hcHBfaWQJZGVwb3NpdG9yBBUffHUHZmVlX2Jwcwh0cmVhc3VyeRJub21pbmF0ZWRfYXNzZXRfaWQxG0EAI4IEBJF8SLYEm5MsWQTDmw3EBPFXdyY2GgCOBABYAEIADgACIkMxGRREMRhEiAMUI0MxGRREMRhENhoBF8AcNhoCFzYaAxc2GgQXNhoFFzYaBhc2GgcXMRYjCUk4ECQSRIgAqiNDMRkURDEYRDEWIwlJOBAjEkSIAFsjQzEZFEQxGBRENhoBFzYaAheIAAIjQ4oCAIICEGNvbnRyYWN0X3ZlcnNpb24IAAAAAAAAA+hni/4WJwpMZ4v/FilMZyooZysoZycEKGcnBShnJwYoZycHKGeJigEAi/84BzIKEkEAKIv/OAiBgLUYEkEAHCNEsTIKSSIpZUQXIrISshGyFLIAJLIQJbIBs4kiQv/higgAgABHA4v6RIv8RIv7RIv9RIv+RIv+FilMZ4v5FipMZ4v6FitMZ4v7FicETGeL/BYnBUxni/0WJwZMZycIi/hnJwsxAGciJwplRBexMgoiJwtlRCInCGVEMggWIillRBcWIiplRBcWIitlRBcWIicEZUQXFiInBWVEFxYiJwZlRBcWgAT3GZ7rshpPBrIaTwWyGoABAbIagAECshpPBLIaTwOyGk8CshpMshqyGkyyHLIcSwGyMrIASbIYgQayEIGgnAGyAbOxMgoxAIAEjeQMKLIashyL+LIcSwGyMrIAshiBBrIQJbIBs7Q+SVcABCcMEkRJVwQIJw1MZ0lXDCAnDkxnSYEsWycJTGdXNAgnD0xnKCInCWVEQQA5sSInCWVEMgoiJwllRDEASYAE1NeqXLIashqyHLIysgCyGIEGshAlsgGztD5JVwQAjARXAAQnDBJEiwQXjAMiJw1lRBeMAiInD2VEF4v+EkEAiYsDIxJBAFKBFIwAi/2LAB2BkE6XSYwBQQA6i/84EYv+EkEAMYv/OBKL/YsBCBJBACSL/zgUMgoSQQAaI0SxIicOZUSL/rIRiwGyErIUJLIQJbIBs4kiQv/jiwOBAhJBAAeBD4wAQv+jiwOBAxJBAAeBDIwAQv+UiwMkD4sCjABB/4mBCowAQv+CiwMjEkEAB4EtjABC/3SLA4ECEkEAB4EmjABC/2WLA4EDEkEAB4EejABC/1aLAyQPiwKMAEH/S4EUjABC/0SKAACAAEcDMQAiJwhlRBJEIillRBdJRDIHSSIqZUQXSU4CDkEAQCKMAyInB2VEF0mMAIsDDEEAKosDiwAJSUSxIicIZUSyFEmyEosEshEkshAlsgGzIicHZUQXCBYnB0xniSJC/9ciK2VEF0mMAkAABiKMA0L/sosFiwYJIkyLApciJwVlRBdKDU0iJwRlRBciJwZlRBdOAh2MAUEABYwDQv+GiwFJSwINTE4CTYwDQv93",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}