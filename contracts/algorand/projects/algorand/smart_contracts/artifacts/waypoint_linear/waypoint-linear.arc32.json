{
    "hints": {
        "createApplication(account,uint64,account,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "setFluxOracleAppId(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setContractVersion(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setAdmin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim(axfer,pay,appl)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 15,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                },
                "beneficiary": {
                    "type": "bytes",
                    "key": "beneficiary"
                },
                "claimed_amount": {
                    "type": "bytes",
                    "key": "claimed_amount"
                },
                "contract_version": {
                    "type": "bytes",
                    "key": "contract_version"
                },
                "deposit_amount": {
                    "type": "bytes",
                    "key": "deposit_amount"
                },
                "depositor": {
                    "type": "bytes",
                    "key": "depositor"
                },
                "fee_bps": {
                    "type": "bytes",
                    "key": "fee_bps"
                },
                "flux_oracle_app_id": {
                    "type": "bytes",
                    "key": "flux_oracle_app_id"
                },
                "max_periods": {
                    "type": "bytes",
                    "key": "max_periods"
                },
                "payout_amount": {
                    "type": "bytes",
                    "key": "payout_amount"
                },
                "period_secs": {
                    "type": "bytes",
                    "key": "period_secs"
                },
                "registry_app_id": {
                    "type": "bytes",
                    "key": "registry_app_id"
                },
                "start_ts": {
                    "type": "bytes",
                    "key": "start_ts"
                },
                "token_id": {
                    "type": "bytes",
                    "key": "token_id"
                },
                "treasury": {
                    "type": "bytes",
                    "key": "treasury"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "waypoint-linear",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "account",
                        "name": "admin"
                    },
                    {
                        "type": "uint64",
                        "name": "fluxOracleAppId"
                    },
                    {
                        "type": "account",
                        "name": "treasury"
                    },
                    {
                        "type": "uint64",
                        "name": "feeBps"
                    },
                    {
                        "type": "uint64",
                        "name": "registryAppId"
                    },
                    {
                        "type": "uint64",
                        "name": "tokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setFluxOracleAppId",
                "args": [
                    {
                        "type": "uint64",
                        "name": "fluxOracleAppId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setContractVersion",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contractVersion"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setAdmin",
                "args": [
                    {
                        "type": "account",
                        "name": "admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createRoute",
                "args": [
                    {
                        "type": "account",
                        "name": "beneficiary"
                    },
                    {
                        "type": "uint64",
                        "name": "startTs"
                    },
                    {
                        "type": "uint64",
                        "name": "periodSecs"
                    },
                    {
                        "type": "uint64",
                        "name": "payoutAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "maxPeriods"
                    },
                    {
                        "type": "uint64",
                        "name": "depositAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "tokenId"
                    },
                    {
                        "type": "axfer",
                        "name": "tokenTransfer"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claim",
                "args": [
                    {
                        "type": "axfer",
                        "name": "_tokenTransfer"
                    },
                    {
                        "type": "pay",
                        "name": "_mbrTxn"
                    },
                    {
                        "type": "appl",
                        "name": "_fluxAppCall"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}