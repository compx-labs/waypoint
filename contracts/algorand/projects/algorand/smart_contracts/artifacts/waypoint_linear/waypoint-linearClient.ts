/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"waypoint-linear","structs":{},"methods":[{"name":"createApplication","args":[{"type":"uint64","name":"registryAppId"},{"type":"uint64","name":"tokenId"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"initApp","args":[{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createRoute","args":[{"type":"account","name":"beneficiary"},{"type":"uint64","name":"startTs"},{"type":"uint64","name":"periodSecs"},{"type":"uint64","name":"payoutAmount"},{"type":"uint64","name":"maxPeriods"},{"type":"uint64","name":"depositAmount"},{"type":"uint64","name":"tokenId"},{"type":"axfer","name":"tokenTransfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claim","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":14},"local":{"ints":0,"bytes":0}},"keys":{"global":{"flux_oracle_app":{"keyType":"AVMString","valueType":"AVMUint64","key":"Zmx1eF9vcmFjbGVfYXBw"},"contract_version":{"keyType":"AVMString","valueType":"uint64","key":"Y29udHJhY3RfdmVyc2lvbg=="},"fee_bps":{"keyType":"AVMString","valueType":"uint64","key":"ZmVlX2Jwcw=="},"treasury":{"keyType":"AVMString","valueType":"address","key":"dHJlYXN1cnk="},"registry_app_id":{"keyType":"AVMString","valueType":"uint64","key":"cmVnaXN0cnlfYXBwX2lk"},"token_id":{"keyType":"AVMString","valueType":"uint64","key":"dG9rZW5faWQ="},"nominated_asset_id":{"keyType":"AVMString","valueType":"uint64","key":"bm9taW5hdGVkX2Fzc2V0X2lk"},"depositor":{"keyType":"AVMString","valueType":"address","key":"ZGVwb3NpdG9y"},"beneficiary":{"keyType":"AVMString","valueType":"address","key":"YmVuZWZpY2lhcnk="},"start_ts":{"keyType":"AVMString","valueType":"uint64","key":"c3RhcnRfdHM="},"period_secs":{"keyType":"AVMString","valueType":"uint64","key":"cGVyaW9kX3NlY3M="},"payout_amount":{"keyType":"AVMString","valueType":"uint64","key":"cGF5b3V0X2Ftb3VudA=="},"max_periods":{"keyType":"AVMString","valueType":"uint64","key":"bWF4X3BlcmlvZHM="},"deposit_amount":{"keyType":"AVMString","valueType":"uint64","key":"ZGVwb3NpdF9hbW91bnQ="},"claimed_amount":{"keyType":"AVMString","valueType":"uint64","key":"Y2xhaW1lZF9hbW91bnQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[718,815],"errorMessage":"Bytes has valid prefix"},{"pc":[492],"errorMessage":"Deposit amount must be greater than 0"},{"pc":[486],"errorMessage":"Max periods must be greater than 0"},{"pc":[1102],"errorMessage":"Nothing claimable yet"},{"pc":[245,257,309,331],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1055],"errorMessage":"Only beneficiary can claim"},{"pc":[489],"errorMessage":"Payout amount must be greater than 0"},{"pc":[483],"errorMessage":"Period seconds must be greater than 0"},{"pc":[1062],"errorMessage":"Route not initialized"},{"pc":[495],"errorMessage":"Token ID must be greater than 0"},{"pc":[443,901],"errorMessage":"assert target is match for conditions"},{"pc":[335],"errorMessage":"can only call when creating"},{"pc":[248,260,312],"errorMessage":"can only call when not creating"},{"pc":[451,549,558,563,570,576,582,589,596,603,755,764,771,825,833,907,1053,1059,1069,1085,1108,1129,1145,1173,1182,1188],"errorMessage":"check GlobalState exists"},{"pc":[300],"errorMessage":"transaction type is axfer"},{"pc":[322],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAEAAEE6AcmEAgAAAAAAAAAAAh0b2tlbl9pZAhzdGFydF90cwtwZXJpb2Rfc2Vjcw1wYXlvdXRfYW1vdW50C21heF9wZXJpb2RzDmRlcG9zaXRfYW1vdW50DmNsYWltZWRfYW1vdW50C2JlbmVmaWNpYXJ5D2ZsdXhfb3JhY2xlX2FwcA9yZWdpc3RyeV9hcHBfaWQJZGVwb3NpdG9yBBUffHUHZmVlX2Jwcwh0cmVhc3VyeRJub21pbmF0ZWRfYXNzZXRfaWQxG0EAI4IEBJF8SLYEm5MsWQTDmw3EBPFXdyY2GgCOBABYAEIADgACIkMxGRREMRhEiAMUI0MxGRREMRhENhoBF8AcNhoCFzYaAxc2GgQXNhoFFzYaBhc2GgcXMRYjCUk4ECQSRIgAqiNDMRkURDEYRDEWIwlJOBAjEkSIAFsjQzEZFEQxGBRENhoBFzYaAheIAAIjQ4oCAIICEGNvbnRyYWN0X3ZlcnNpb24IAAAAAAAAA+hni/4WJwpMZ4v/FilMZyooZysoZycEKGcnBShnJwYoZycHKGeJigEAi/84BzIKEkEAKIv/OAiBgLUYEkEAHCNEsTIKSSIpZUQXIrISshGyFLIAJLIQJbIBs4kiQv/higgAgABHA4v6RIv8RIv7RIv9RIv+RIv+FilMZ4v5FipMZ4v6FitMZ4v7FicETGeL/BYnBUxni/0WJwZMZycIi/hnJwsxAGciJwplRBexMgoiJwtlRCInCGVEMggWIillRBcWIiplRBcWIitlRBcWIicEZUQXFiInBWVEFxYiJwZlRBcWgAT3GZ7rshpPBrIaTwWyGoABAbIagAECshpPBLIaTwOyGk8CshpMshqyGkyyHLIcSwGyMrIASbIYgQayEIGgnAGyAbOxMgoxAIAEjeQMKLIashyL+LIcSwGyMrIAshiBBrIQJbIBs7Q+SVcABCcMEkRJVwQIJw1MZ0lXDCAnDkxnSYEsWycJTGdXNAgnD0xnKCInCWVEQQA5sSInCWVEMgoiJwllRDEASYAE1NeqXLIashqyHLIysgCyGIEGshAlsgGztD5JVwQAjARXAAQnDBJEiwQXjAMiJw1lRBeMAiInD2VEF4v+EkEAiYsDIxJBAFKBFIwAi/2LAB2BkE6XSYwBQQA6i/84EYv+EkEAMYv/OBKL/YsBCBJBACSL/zgUMgoSQQAaI0SxIicOZUSL/rIRiwGyErIUJLIQJbIBs4kiQv/jiwOBAhJBAAeBD4wAQv+jiwOBAxJBAAeBDIwAQv+UiwMkD4sCjABB/4mBCowAQv+CiwMjEkEAB4EtjABC/3SLA4ECEkEAB4EmjABC/2WLA4EDEkEAB4EejABC/1aLAyQPiwKMAEH/S4EUjABC/0SKAACAAEcDMQAiJwhlRBJEIillRBdJRDIHSSIqZUQXSU4CDkEAQCKMAyInB2VEF0mMAIsDDEEAKosDiwAJSUSxIicIZUSyFEmyEosEshEkshAlsgGzIicHZUQXCBYnB0xniSJC/9ciK2VEF0mMAkAABiKMA0L/sosFiwYJIkyLApciJwVlRBdKDU0iJwRlRBciJwZlRBdOAh2MAUEABYwDQv+GiwFJSwINTE4CTYwDQv93","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the WaypointLinear contract
 */
export type WaypointLinearArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,uint64)void': {
      registryAppId: bigint | number
      tokenId: bigint | number
    }
    'initApp(pay)void': {
      mbrTxn: AppMethodCallTransactionArgument
    }
    'createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void': {
      beneficiary: Uint8Array | string
      startTs: bigint | number
      periodSecs: bigint | number
      payoutAmount: bigint | number
      maxPeriods: bigint | number
      depositAmount: bigint | number
      tokenId: bigint | number
      tokenTransfer: AppMethodCallTransactionArgument
    }
    'claim()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,uint64)void': [registryAppId: bigint | number, tokenId: bigint | number]
    'initApp(pay)void': [mbrTxn: AppMethodCallTransactionArgument]
    'createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void': [beneficiary: Uint8Array | string, startTs: bigint | number, periodSecs: bigint | number, payoutAmount: bigint | number, maxPeriods: bigint | number, depositAmount: bigint | number, tokenId: bigint | number, tokenTransfer: AppMethodCallTransactionArgument]
    'claim()void': []
  }
}

/**
 * The return type for each method
 */
export type WaypointLinearReturns = {
  'createApplication(uint64,uint64)void': void
  'initApp(pay)void': void
  'createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void': void
  'claim()void': void
}

/**
 * Defines the types of available calls and state of the WaypointLinear smart contract.
 */
export type WaypointLinearTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64)void' | 'createApplication', {
      argsObj: WaypointLinearArgs['obj']['createApplication(uint64,uint64)void']
      argsTuple: WaypointLinearArgs['tuple']['createApplication(uint64,uint64)void']
      returns: WaypointLinearReturns['createApplication(uint64,uint64)void']
    }>
    & Record<'initApp(pay)void' | 'initApp', {
      argsObj: WaypointLinearArgs['obj']['initApp(pay)void']
      argsTuple: WaypointLinearArgs['tuple']['initApp(pay)void']
      returns: WaypointLinearReturns['initApp(pay)void']
    }>
    & Record<'createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void' | 'createRoute', {
      argsObj: WaypointLinearArgs['obj']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']
      argsTuple: WaypointLinearArgs['tuple']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']
      returns: WaypointLinearReturns['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']
    }>
    & Record<'claim()void' | 'claim', {
      argsObj: WaypointLinearArgs['obj']['claim()void']
      argsTuple: WaypointLinearArgs['tuple']['claim()void']
      returns: WaypointLinearReturns['claim()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        fluxOracleApp: bigint
        contractVersion: bigint
        feeBps: bigint
        treasury: string
        registryAppId: bigint
        tokenId: bigint
        nominatedAssetId: bigint
        depositor: string
        beneficiary: string
        startTs: bigint
        periodSecs: bigint
        payoutAmount: bigint
        maxPeriods: bigint
        depositAmount: bigint
        claimedAmount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WaypointLinearSignatures = keyof WaypointLinearTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WaypointLinearNonVoidMethodSignatures = keyof WaypointLinearTypes['methods'] extends infer T ? T extends keyof WaypointLinearTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the WaypointLinear smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WaypointLinearSignatures> = WaypointLinearTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the WaypointLinear smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WaypointLinearSignatures> = WaypointLinearTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WaypointLinearTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WaypointLinearCreateCallParams =
  | Expand<CallParams<WaypointLinearArgs['obj']['createApplication(uint64,uint64)void'] | WaypointLinearArgs['tuple']['createApplication(uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<WaypointLinearArgs['obj']['createApplication(uint64,uint64)void'] | WaypointLinearArgs['tuple']['createApplication(uint64,uint64)void']> & {method: 'createApplication(uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WaypointLinearDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WaypointLinearCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the WaypointLinear smart contract
 */
export abstract class WaypointLinearParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends WaypointLinearCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,uint64)void':
            return WaypointLinearParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the waypoint-linear smart contract using the createApplication(uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<WaypointLinearArgs['obj']['createApplication(uint64,uint64)void'] | WaypointLinearArgs['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.registryAppId, params.args.tokenId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApp(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApp(params: CallParams<WaypointLinearArgs['obj']['initApp(pay)void'] | WaypointLinearArgs['tuple']['initApp(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApp(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createRoute(params: CallParams<WaypointLinearArgs['obj']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void'] | WaypointLinearArgs['tuple']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.beneficiary, params.args.startTs, params.args.periodSecs, params.args.payoutAmount, params.args.maxPeriods, params.args.depositAmount, params.args.tokenId, params.args.tokenTransfer],
    }
  }
  /**
   * Constructs a no op call for the claim()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claim(params: CallParams<WaypointLinearArgs['obj']['claim()void'] | WaypointLinearArgs['tuple']['claim()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the waypoint-linear smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WaypointLinearFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WaypointLinearFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WaypointLinearClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WaypointLinearClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the waypoint-linear smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WaypointLinearDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? WaypointLinearParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (WaypointLinearCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new WaypointLinearClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-linear smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<WaypointLinearArgs['obj']['createApplication(uint64,uint64)void'] | WaypointLinearArgs['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(WaypointLinearParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-linear smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<WaypointLinearArgs['obj']['createApplication(uint64,uint64)void'] | WaypointLinearArgs['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(WaypointLinearParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the waypoint-linear smart contract using an ABI method call using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<WaypointLinearArgs['obj']['createApplication(uint64,uint64)void'] | WaypointLinearArgs['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(WaypointLinearParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | WaypointLinearReturns['createApplication(uint64,uint64)void']) }, appClient: new WaypointLinearClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the waypoint-linear smart contract
 */
export class WaypointLinearClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WaypointLinearClient`
   *
   * @param appClient An `AppClient` instance which has been created with the WaypointLinear app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WaypointLinearClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WaypointLinearNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WaypointLinearClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WaypointLinearClient> {
    return new WaypointLinearClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WaypointLinearClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WaypointLinearClient> {
    return new WaypointLinearClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-linear smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `initApp(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApp: (params: CallParams<WaypointLinearArgs['obj']['initApp(pay)void'] | WaypointLinearArgs['tuple']['initApp(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointLinearParamsFactory.initApp(params))
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createRoute: (params: CallParams<WaypointLinearArgs['obj']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void'] | WaypointLinearArgs['tuple']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WaypointLinearParamsFactory.createRoute(params))
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `claim()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claim: (params: CallParams<WaypointLinearArgs['obj']['claim()void'] | WaypointLinearArgs['tuple']['claim()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(WaypointLinearParamsFactory.claim(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-linear smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `initApp(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApp: (params: CallParams<WaypointLinearArgs['obj']['initApp(pay)void'] | WaypointLinearArgs['tuple']['initApp(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointLinearParamsFactory.initApp(params))
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createRoute: (params: CallParams<WaypointLinearArgs['obj']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void'] | WaypointLinearArgs['tuple']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WaypointLinearParamsFactory.createRoute(params))
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `claim()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claim: (params: CallParams<WaypointLinearArgs['obj']['claim()void'] | WaypointLinearArgs['tuple']['claim()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(WaypointLinearParamsFactory.claim(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the waypoint-linear smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `initApp(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApp: async (params: CallParams<WaypointLinearArgs['obj']['initApp(pay)void'] | WaypointLinearArgs['tuple']['initApp(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointLinearParamsFactory.initApp(params))
      return {...result, return: result.return as unknown as (undefined | WaypointLinearReturns['initApp(pay)void'])}
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createRoute: async (params: CallParams<WaypointLinearArgs['obj']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void'] | WaypointLinearArgs['tuple']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WaypointLinearParamsFactory.createRoute(params))
      return {...result, return: result.return as unknown as (undefined | WaypointLinearReturns['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void'])}
    },

    /**
     * Makes a call to the waypoint-linear smart contract using the `claim()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claim: async (params: CallParams<WaypointLinearArgs['obj']['claim()void'] | WaypointLinearArgs['tuple']['claim()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(WaypointLinearParamsFactory.claim(params))
      return {...result, return: result.return as unknown as (undefined | WaypointLinearReturns['claim()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WaypointLinearClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current waypoint-linear app
   */
  state = {
    /**
     * Methods to access global state for the current waypoint-linear app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          fluxOracleApp: result.flux_oracle_app,
          contractVersion: result.contract_version,
          feeBps: result.fee_bps,
          treasury: result.treasury,
          registryAppId: result.registry_app_id,
          tokenId: result.token_id,
          nominatedAssetId: result.nominated_asset_id,
          depositor: result.depositor,
          beneficiary: result.beneficiary,
          startTs: result.start_ts,
          periodSecs: result.period_secs,
          payoutAmount: result.payout_amount,
          maxPeriods: result.max_periods,
          depositAmount: result.deposit_amount,
          claimedAmount: result.claimed_amount,
        }
      },
      /**
       * Get the current value of the flux_oracle_app key in global state
       */
      fluxOracleApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("flux_oracle_app")) as bigint | undefined },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_version")) as bigint | undefined },
      /**
       * Get the current value of the fee_bps key in global state
       */
      feeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the treasury key in global state
       */
      treasury: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("treasury")) as string | undefined },
      /**
       * Get the current value of the registry_app_id key in global state
       */
      registryAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registry_app_id")) as bigint | undefined },
      /**
       * Get the current value of the token_id key in global state
       */
      tokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token_id")) as bigint | undefined },
      /**
       * Get the current value of the nominated_asset_id key in global state
       */
      nominatedAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nominated_asset_id")) as bigint | undefined },
      /**
       * Get the current value of the depositor key in global state
       */
      depositor: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("depositor")) as string | undefined },
      /**
       * Get the current value of the beneficiary key in global state
       */
      beneficiary: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("beneficiary")) as string | undefined },
      /**
       * Get the current value of the start_ts key in global state
       */
      startTs: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("start_ts")) as bigint | undefined },
      /**
       * Get the current value of the period_secs key in global state
       */
      periodSecs: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("period_secs")) as bigint | undefined },
      /**
       * Get the current value of the payout_amount key in global state
       */
      payoutAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("payout_amount")) as bigint | undefined },
      /**
       * Get the current value of the max_periods key in global state
       */
      maxPeriods: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_periods")) as bigint | undefined },
      /**
       * Get the current value of the deposit_amount key in global state
       */
      depositAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("deposit_amount")) as bigint | undefined },
      /**
       * Get the current value of the claimed_amount key in global state
       */
      claimedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("claimed_amount")) as bigint | undefined },
    },
  }

  public newGroup(): WaypointLinearComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApp(pay)void method call against the waypoint-linear contract
       */
      initApp(params: CallParams<WaypointLinearArgs['obj']['initApp(pay)void'] | WaypointLinearArgs['tuple']['initApp(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void method call against the waypoint-linear contract
       */
      createRoute(params: CallParams<WaypointLinearArgs['obj']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void'] | WaypointLinearArgs['tuple']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createRoute(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claim()void method call against the waypoint-linear contract
       */
      claim(params: CallParams<WaypointLinearArgs['obj']['claim()void'] | WaypointLinearArgs['tuple']['claim()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claim(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the waypoint-linear contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WaypointLinearComposer
  }
}
export type WaypointLinearComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApp(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApp(params?: CallParams<WaypointLinearArgs['obj']['initApp(pay)void'] | WaypointLinearArgs['tuple']['initApp(pay)void']>): WaypointLinearComposer<[...TReturns, WaypointLinearReturns['initApp(pay)void'] | undefined]>

  /**
   * Calls the createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createRoute(params?: CallParams<WaypointLinearArgs['obj']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void'] | WaypointLinearArgs['tuple']['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void']>): WaypointLinearComposer<[...TReturns, WaypointLinearReturns['createRoute(account,uint64,uint64,uint64,uint64,uint64,uint64,axfer)void'] | undefined]>

  /**
   * Calls the claim()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claim(params?: CallParams<WaypointLinearArgs['obj']['claim()void'] | WaypointLinearArgs['tuple']['claim()void']>): WaypointLinearComposer<[...TReturns, WaypointLinearReturns['claim()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the waypoint-linear smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WaypointLinearComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WaypointLinearComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WaypointLinearComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WaypointLinearComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WaypointLinearComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WaypointLinearComposerResults<TReturns>>
}
export type WaypointLinearComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

