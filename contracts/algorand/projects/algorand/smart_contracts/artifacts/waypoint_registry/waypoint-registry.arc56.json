{
    "name": "waypoint-registry",
    "structs": {
        "Route": [
            {
                "name": "tokenId",
                "type": "uint64"
            },
            {
                "name": "depositor",
                "type": "address"
            },
            {
                "name": "beneficiary",
                "type": "address"
            },
            {
                "name": "startTs",
                "type": "uint64"
            },
            {
                "name": "periodSecs",
                "type": "uint64"
            },
            {
                "name": "payoutAmount",
                "type": "uint64"
            },
            {
                "name": "maxPeriods",
                "type": "uint64"
            },
            {
                "name": "depositAmount",
                "type": "uint64"
            },
            {
                "name": "claimedAmount",
                "type": "uint64"
            }
        ],
        "WaypointRegistryParams": [
            {
                "name": "fee_bps",
                "type": "uint64"
            },
            {
                "name": "treasury",
                "type": "address"
            },
            {
                "name": "flux_oracle_app_id",
                "type": "uint64"
            },
            {
                "name": "nominated_asset_id",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "account",
                    "name": "admin"
                },
                {
                    "type": "uint64",
                    "name": "feeBps"
                },
                {
                    "type": "account",
                    "name": "treasury"
                },
                {
                    "type": "uint64",
                    "name": "nominatedAssetId"
                },
                {
                    "type": "application",
                    "name": "flux_oracle_app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setFeeBps",
            "args": [
                {
                    "type": "uint64",
                    "name": "feeBps"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setTreasury",
            "args": [
                {
                    "type": "account",
                    "name": "treasury"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setNominatedAssetId",
            "args": [
                {
                    "type": "uint64",
                    "name": "nominatedAssetId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "registerRoute",
            "args": [
                {
                    "type": "uint64",
                    "name": "routeAppId"
                },
                {
                    "type": "uint64",
                    "name": "tokenId"
                },
                {
                    "type": "account",
                    "name": "depositor"
                },
                {
                    "type": "account",
                    "name": "beneficiary"
                },
                {
                    "type": "uint64",
                    "name": "startTs"
                },
                {
                    "type": "uint64",
                    "name": "periodSecs"
                },
                {
                    "type": "uint64",
                    "name": "payoutAmount"
                },
                {
                    "type": "uint64",
                    "name": "maxPeriods"
                },
                {
                    "type": "uint64",
                    "name": "depositAmount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateRouteClaimedAmount",
            "args": [
                {
                    "type": "uint64",
                    "name": "routeAppId"
                },
                {
                    "type": "uint64",
                    "name": "newClaimedAmount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getParams",
            "args": [],
            "returns": {
                "type": "(uint64,address,uint64,uint64)",
                "struct": "WaypointRegistryParams"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 8
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "fee_bps": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "ZmVlX2Jwcw=="
                },
                "contract_version": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Y29udHJhY3RfdmVyc2lvbg=="
                },
                "treasury": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "dHJlYXN1cnk="
                },
                "nominated_asset_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bm9taW5hdGVkX2Fzc2V0X2lk"
                },
                "num_routes": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bnVtX3JvdXRlcw=="
                },
                "total_routed": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "dG90YWxfcm91dGVk"
                },
                "current_active_route_total": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Y3VycmVudF9hY3RpdmVfcm91dGVfdG90YWw="
                },
                "flux_oracle_app": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Zmx1eF9vcmFjbGVfYXBw"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "routes": {
                    "keyType": "uint64",
                    "valueType": "Route",
                    "prefix": "cg=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        615
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        634
                    ],
                    "errorMessage": "New claimed amount cannot exceed deposit amount"
                },
                {
                    "pc": [
                        625
                    ],
                    "errorMessage": "New claimed amount must be greater than or equal to current claimed amount"
                },
                {
                    "pc": [
                        191,
                        212,
                        232,
                        284,
                        300,
                        318,
                        334
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        451
                    ],
                    "errorMessage": "Only admin can set fee bps"
                },
                {
                    "pc": [
                        486
                    ],
                    "errorMessage": "Only admin can set nominated asset id"
                },
                {
                    "pc": [
                        469
                    ],
                    "errorMessage": "Only admin can set treasury"
                },
                {
                    "pc": [
                        511
                    ],
                    "errorMessage": "Route already exists"
                },
                {
                    "pc": [
                        612
                    ],
                    "errorMessage": "Route does not exist"
                },
                {
                    "pc": [
                        338
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        194,
                        215,
                        235,
                        287,
                        303,
                        321
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        449,
                        467,
                        484,
                        559,
                        572,
                        585,
                        654,
                        666,
                        671,
                        676,
                        681
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyACAAEmCRpjdXJyZW50X2FjdGl2ZV9yb3V0ZV90b3RhbAVhZG1pbggAAAAAAAAAAAdmZWVfYnBzCHRyZWFzdXJ5Em5vbWluYXRlZF9hc3NldF9pZApudW1fcm91dGVzDHRvdGFsX3JvdXRlZA9mbHV4X29yYWNsZV9hcHAxG0EAOIIHBFgok1sExZcpjASMJhcaBMaqZ3YE9xme6wSuvDQWBI3kDCg2GgCOBwCRAIEAbwBfACsAFwACIkMxGRREMRhEiAHRgAQVH3x1TFCwI0MxGRREMRhENhoBFzYaAheIAXAjQzEZFEQxGEQ2GgEXNhoCFzYaAxfAHDYaBBfAHDYaBRc2GgYXNhoHFzYaCBc2GgkXiADYI0MxGRREMRhENhoBF4gAtSNDMRkURDEYRDYaARfAHIgAkiNDMRkURDEYRDYaAReIAHAjQzEZFEQxGBRENhoBF8AcNhoCFzYaAxfAHDYaBBc2GgUXwDKIAAIjQ4oFACmL+2eL/BYrTGcnBIv9Z4ICEGNvbnRyYWN0X3ZlcnNpb24IAAAAAAAAA+hni/4WJwVMZycGKmcnBypnKCpnJwiL/2eJigEAMQAiKWVEEkSL/xYrTGeJigEAMQAiKWVEEkQnBIv/Z4mKAQAxACIpZUQSRIv/FicFTGeJigkAi/cWgAFyTFBJvUUBFESL+BaL+xaL/BaL/RaL/haL/xZPBYv5UIv6UE8FUE8EUE8DUE8CUExQKlC/IicGZUQXIwgWJwZMZyInB2VEF4v/CBYnB0xnIihlRBeL/wgWKExniYoCAIv+FoABckxQSb1FASMSREm+REmBcFuL/0sBD0RLAYFoW4v/D0SL/0wJi/8WTwJMXHBPAky/IihlRBdMCRYoTGeJIitlRCInBGVEIicFZUQiJwhlRBZPA08DUExQTFCJ",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}