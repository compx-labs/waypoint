{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/waypoint/contracts/algorand/projects/algorand/smart_contracts/waypoint_registry/waypoint-registry.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAgGG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAlFH;;;AAAA;AAAA;;;AAAA;AAkFG;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AAnDH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAmDG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA7CH;;;AAAA;AA6CG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvCH;;;AAAA;AAAA;;AAuCG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAjCH;;;AAAA;AAiCG;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAdH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAcG;;;AAAA;;AAAD;;;AAXA;AAmBE;;AAAA;AACqB;;AAAA;AAnBvB;AAmBE;AAAA;AAjBF;;AAkBE;;AAAA;AAnBF;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBE;AACgC;;AAAA;AAnBlC;;AAmBE;AAAA;AAjBF;;AAkB0B;AAAxB;AAjBF;;AAkB4B;AAA1B;AAjBF;AAkB0C;AAAxC;AAjBF;;AAkBE;;AAAA;;AAGF;;;AAEgB;;AAhChB;AAAA;AAAA;AAAA;AAgCS;AAAP;AACqB;;AAAA;AAhCvB;AAgCE;AAAA;;AAGF;;;AAEgB;;AAtChB;AAAA;AAAA;AAAA;AAsCS;AAAP;AAnCF;;AAoCE;;AAAA;;AAGF;;;AAEgB;;AA5ChB;AAAA;AAAA;AAAA;AA4CS;AAAP;AACgC;;AAAA;AAzClC;;AAyCE;AAAA;;AAGF;;;AAYS;;AAAA;AAvDmC;;;AAAA;AAAA;AAuDX;AAAA;AAAA;;AAAxB;AAAP;AAGW;;AAAA;AAGA;;AAAA;AACG;;AAAA;AACE;;AAAA;AACF;;AAAA;AACG;;AAAA;AARA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASA;AATA;AAWjB;AAnEF;AAAA;;AAAA;AAAA;AAoE4D;AAAS;AAA/B;AAAZ;AApE1B;;AAoEE;AAAA;AAnEF;AAAA;;AAAA;AAAA;AAoEgE;AAAxB;;AAAA;AAAZ;AApE5B;;AAoEE;AAAA;AAnEF;AAAA;AAAA;AAAA;AAoE4F;AAAtC;;AAAA;AAAZ;AApE1C;AAoEE;AAAA;;AAGF;;;AAES;;AAAA;AA5EmC;;;AAAA;AAAA;AA4EX;AAAA;AAAA;;AAAW;AAAnC;AAAP;AACsC;AAAA;AAAA;AACS;AAAd;;AAAc;AAAxC;;AAAA;;AAAA;AAAP;AAC+C;;AAAd;;AAAc;AAAxC;;AAAA;AAAP;AAEM;;AAAA;AAAgB;AACA;;AAAA;AAAtB;;AAAA;AAAA;;AACA;;AAAA;AAAA;AAhFF;AAAA;AAAA;AAAA;AAmF4F;AAAtC;AAAA;AAAZ;AAnF1C;AAmFE;AAAA;;AA1FF;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAKA;AAAA;;AAAA;AAAA;AA0FwB;AAJf;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"current_active_route_total\" \"admin\" 0x0000000000000000 \"fee_bps\" \"treasury\" \"nominated_asset_id\" \"num_routes\" \"total_routed\" \"flux_oracle_app\""
    },
    "125": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "127": {
      "op": "bz main_after_if_else@13",
      "stack_out": []
    },
    "130": {
      "op": "pushbytess 0x5828935b 0xc597298c 0x8c26171a 0xc6aa6776 0xf7199eeb 0xaebc3416 0x8de40c28 // method \"createApplication(account,uint64,account,uint64,application)void\", method \"setFeeBps(uint64)void\", method \"setTreasury(account)void\", method \"setNominatedAssetId(uint64)void\", method \"registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void\", method \"updateRouteClaimedAmount(uint64,uint64)void\", method \"getParams()(uint64,address,uint64,uint64)\"",
      "defined_out": [
        "Method(createApplication(account,uint64,account,uint64,application)void)",
        "Method(getParams()(uint64,address,uint64,uint64))",
        "Method(registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setFeeBps(uint64)void)",
        "Method(setNominatedAssetId(uint64)void)",
        "Method(setTreasury(account)void)",
        "Method(updateRouteClaimedAmount(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64,account,uint64,application)void)",
        "Method(setFeeBps(uint64)void)",
        "Method(setTreasury(account)void)",
        "Method(setNominatedAssetId(uint64)void)",
        "Method(registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(updateRouteClaimedAmount(uint64,uint64)void)",
        "Method(getParams()(uint64,address,uint64,uint64))"
      ]
    },
    "167": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication(account,uint64,account,uint64,application)void)",
        "Method(getParams()(uint64,address,uint64,uint64))",
        "Method(registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setFeeBps(uint64)void)",
        "Method(setNominatedAssetId(uint64)void)",
        "Method(setTreasury(account)void)",
        "Method(updateRouteClaimedAmount(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64,account,uint64,application)void)",
        "Method(setFeeBps(uint64)void)",
        "Method(setTreasury(account)void)",
        "Method(setNominatedAssetId(uint64)void)",
        "Method(registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(updateRouteClaimedAmount(uint64,uint64)void)",
        "Method(getParams()(uint64,address,uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "170": {
      "op": "match main_createApplication_route@3 main_setFeeBps_route@4 main_setTreasury_route@5 main_setNominatedAssetId_route@6 main_registerRoute_route@7 main_updateRouteClaimedAmount_route@8 main_getParams_route@9",
      "stack_out": []
    },
    "186": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "187": {
      "op": "return",
      "stack_out": []
    },
    "188": {
      "block": "main_getParams_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "190": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "191": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "192": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "194": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "195": {
      "callsub": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.getParams",
      "op": "callsub getParams",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "198": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "0x151f7c75"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%56#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "206": {
      "op": "log",
      "stack_out": []
    },
    "207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "block": "main_updateRouteClaimedAmount_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "211": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "212": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "213": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "215": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "216": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "219": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "220": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "223": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "224": {
      "callsub": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.updateRouteClaimedAmount",
      "op": "callsub updateRouteClaimedAmount",
      "stack_out": []
    },
    "227": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "228": {
      "op": "return",
      "stack_out": []
    },
    "229": {
      "block": "main_registerRoute_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "231": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "232": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "233": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "235": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "236": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "239": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "240": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "243": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "244": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%4#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "247": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "248": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0"
      ]
    },
    "250": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%5#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "253": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "254": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0"
      ]
    },
    "256": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "259": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "260": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "263": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "264": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "267": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "268": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "271": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "272": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "275": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "276": {
      "callsub": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.registerRoute",
      "op": "callsub registerRoute",
      "stack_out": []
    },
    "279": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "280": {
      "op": "return",
      "stack_out": []
    },
    "281": {
      "block": "main_setNominatedAssetId_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "283": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "284": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "285": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "287": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "288": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "291": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "292": {
      "callsub": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setNominatedAssetId",
      "op": "callsub setNominatedAssetId",
      "stack_out": []
    },
    "295": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "296": {
      "op": "return",
      "stack_out": []
    },
    "297": {
      "block": "main_setTreasury_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "299": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "300": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "301": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "303": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "304": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "307": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "308": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "310": {
      "callsub": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setTreasury",
      "op": "callsub setTreasury",
      "stack_out": []
    },
    "313": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "314": {
      "op": "return",
      "stack_out": []
    },
    "315": {
      "block": "main_setFeeBps_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "317": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "318": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "319": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "321": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "322": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "325": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "326": {
      "callsub": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setFeeBps",
      "op": "callsub setFeeBps",
      "stack_out": []
    },
    "329": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "330": {
      "op": "return",
      "stack_out": []
    },
    "331": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "333": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "334": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "335": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "337": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "338": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "339": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "342": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "343": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "345": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "348": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "349": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "352": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "353": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "355": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "358": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "359": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "362": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "363": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "365": {
      "callsub": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "subroutine": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.createApplication",
      "params": {
        "admin#0": "bytes",
        "feeBps#0": "uint64",
        "treasury#0": "bytes",
        "nominatedAssetId#0": "uint64",
        "flux_oracle_app#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "373": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "374": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ]
    },
    "376": {
      "op": "app_global_put",
      "stack_out": []
    },
    "377": {
      "op": "frame_dig -4",
      "defined_out": [
        "feeBps#0 (copy)"
      ],
      "stack_out": [
        "feeBps#0 (copy)"
      ]
    },
    "379": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "380": {
      "op": "bytec_3 // \"fee_bps\"",
      "defined_out": [
        "\"fee_bps\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"fee_bps\""
      ]
    },
    "381": {
      "op": "swap",
      "stack_out": [
        "\"fee_bps\"",
        "val_as_bytes%0#0"
      ]
    },
    "382": {
      "op": "app_global_put",
      "stack_out": []
    },
    "383": {
      "op": "bytec 4 // \"treasury\"",
      "defined_out": [
        "\"treasury\""
      ],
      "stack_out": [
        "\"treasury\""
      ]
    },
    "385": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"treasury\"",
        "treasury#0 (copy)"
      ],
      "stack_out": [
        "\"treasury\"",
        "treasury#0 (copy)"
      ]
    },
    "387": {
      "op": "app_global_put",
      "stack_out": []
    },
    "388": {
      "op": "pushbytess \"contract_version\" 0x00000000000003e8 // \"contract_version\", 0x00000000000003e8",
      "defined_out": [
        "\"contract_version\"",
        "0x00000000000003e8"
      ],
      "stack_out": [
        "\"contract_version\"",
        "0x00000000000003e8"
      ]
    },
    "416": {
      "op": "app_global_put",
      "stack_out": []
    },
    "417": {
      "op": "frame_dig -2",
      "defined_out": [
        "nominatedAssetId#0 (copy)"
      ],
      "stack_out": [
        "nominatedAssetId#0 (copy)"
      ]
    },
    "419": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "420": {
      "op": "bytec 5 // \"nominated_asset_id\"",
      "defined_out": [
        "\"nominated_asset_id\"",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "\"nominated_asset_id\""
      ]
    },
    "422": {
      "op": "swap",
      "stack_out": [
        "\"nominated_asset_id\"",
        "val_as_bytes%1#0"
      ]
    },
    "423": {
      "op": "app_global_put",
      "stack_out": []
    },
    "424": {
      "op": "bytec 6 // \"num_routes\"",
      "defined_out": [
        "\"num_routes\""
      ],
      "stack_out": [
        "\"num_routes\""
      ]
    },
    "426": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "\"num_routes\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"num_routes\"",
        "0x0000000000000000"
      ]
    },
    "427": {
      "op": "app_global_put",
      "stack_out": []
    },
    "428": {
      "op": "bytec 7 // \"total_routed\"",
      "defined_out": [
        "\"total_routed\""
      ],
      "stack_out": [
        "\"total_routed\""
      ]
    },
    "430": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "\"total_routed\"",
        "0x0000000000000000"
      ]
    },
    "431": {
      "op": "app_global_put",
      "stack_out": []
    },
    "432": {
      "op": "bytec_0 // \"current_active_route_total\"",
      "defined_out": [
        "\"current_active_route_total\""
      ],
      "stack_out": [
        "\"current_active_route_total\""
      ]
    },
    "433": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "\"current_active_route_total\"",
        "0x0000000000000000"
      ]
    },
    "434": {
      "op": "app_global_put",
      "stack_out": []
    },
    "435": {
      "op": "bytec 8 // \"flux_oracle_app\"",
      "defined_out": [
        "\"flux_oracle_app\""
      ],
      "stack_out": [
        "\"flux_oracle_app\""
      ]
    },
    "437": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"flux_oracle_app\"",
        "flux_oracle_app#0 (copy)"
      ],
      "stack_out": [
        "\"flux_oracle_app\"",
        "flux_oracle_app#0 (copy)"
      ]
    },
    "439": {
      "op": "app_global_put",
      "stack_out": []
    },
    "440": {
      "retsub": true,
      "op": "retsub"
    },
    "441": {
      "subroutine": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setFeeBps",
      "params": {
        "feeBps#0": "uint64"
      },
      "block": "setFeeBps",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "444": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "446": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "447": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "448": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "449": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "450": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "451": {
      "error": "Only admin can set fee bps",
      "op": "assert // Only admin can set fee bps",
      "stack_out": []
    },
    "452": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeBps#0 (copy)"
      ],
      "stack_out": [
        "feeBps#0 (copy)"
      ]
    },
    "454": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "455": {
      "op": "bytec_3 // \"fee_bps\"",
      "defined_out": [
        "\"fee_bps\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"fee_bps\""
      ]
    },
    "456": {
      "op": "swap",
      "stack_out": [
        "\"fee_bps\"",
        "val_as_bytes%0#0"
      ]
    },
    "457": {
      "op": "app_global_put",
      "stack_out": []
    },
    "458": {
      "retsub": true,
      "op": "retsub"
    },
    "459": {
      "subroutine": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setTreasury",
      "params": {
        "treasury#0": "bytes"
      },
      "block": "setTreasury",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "462": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "465": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "466": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "467": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "468": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "469": {
      "error": "Only admin can set treasury",
      "op": "assert // Only admin can set treasury",
      "stack_out": []
    },
    "470": {
      "op": "bytec 4 // \"treasury\"",
      "defined_out": [
        "\"treasury\""
      ],
      "stack_out": [
        "\"treasury\""
      ]
    },
    "472": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"treasury\"",
        "treasury#0 (copy)"
      ],
      "stack_out": [
        "\"treasury\"",
        "treasury#0 (copy)"
      ]
    },
    "474": {
      "op": "app_global_put",
      "stack_out": []
    },
    "475": {
      "retsub": true,
      "op": "retsub"
    },
    "476": {
      "subroutine": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setNominatedAssetId",
      "params": {
        "nominatedAssetId#0": "uint64"
      },
      "block": "setNominatedAssetId",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "479": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "481": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "482": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "483": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "484": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "485": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "486": {
      "error": "Only admin can set nominated asset id",
      "op": "assert // Only admin can set nominated asset id",
      "stack_out": []
    },
    "487": {
      "op": "frame_dig -1",
      "defined_out": [
        "nominatedAssetId#0 (copy)"
      ],
      "stack_out": [
        "nominatedAssetId#0 (copy)"
      ]
    },
    "489": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "490": {
      "op": "bytec 5 // \"nominated_asset_id\"",
      "defined_out": [
        "\"nominated_asset_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"nominated_asset_id\""
      ]
    },
    "492": {
      "op": "swap",
      "stack_out": [
        "\"nominated_asset_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "493": {
      "op": "app_global_put",
      "stack_out": []
    },
    "494": {
      "retsub": true,
      "op": "retsub"
    },
    "495": {
      "subroutine": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.registerRoute",
      "params": {
        "routeAppId#0": "uint64",
        "tokenId#0": "uint64",
        "depositor#0": "bytes",
        "beneficiary#0": "bytes",
        "startTs#0": "uint64",
        "periodSecs#0": "uint64",
        "payoutAmount#0": "uint64",
        "maxPeriods#0": "uint64",
        "depositAmount#0": "uint64"
      },
      "block": "registerRoute",
      "stack_in": [],
      "op": "proto 9 0"
    },
    "498": {
      "op": "frame_dig -9",
      "defined_out": [
        "routeAppId#0 (copy)"
      ],
      "stack_out": [
        "routeAppId#0 (copy)"
      ]
    },
    "500": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "pushbytes \"r\"",
      "defined_out": [
        "\"r\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"r\""
      ]
    },
    "504": {
      "op": "swap",
      "stack_out": [
        "\"r\"",
        "tmp%0#0"
      ]
    },
    "505": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "506": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "507": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "508": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "510": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "511": {
      "error": "Route already exists",
      "op": "assert // Route already exists",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "512": {
      "op": "frame_dig -8",
      "defined_out": [
        "tmp%1#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tokenId#0 (copy)"
      ]
    },
    "514": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "515": {
      "op": "frame_dig -5",
      "defined_out": [
        "startTs#0 (copy)",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "startTs#0 (copy)"
      ]
    },
    "517": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "518": {
      "op": "frame_dig -4",
      "defined_out": [
        "periodSecs#0 (copy)",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "periodSecs#0 (copy)"
      ]
    },
    "520": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "521": {
      "op": "frame_dig -3",
      "defined_out": [
        "payoutAmount#0 (copy)",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "payoutAmount#0 (copy)"
      ]
    },
    "523": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "524": {
      "op": "frame_dig -2",
      "defined_out": [
        "maxPeriods#0 (copy)",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maxPeriods#0 (copy)"
      ]
    },
    "526": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "527": {
      "op": "frame_dig -1",
      "defined_out": [
        "depositAmount#0 (copy)",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "depositAmount#0 (copy)"
      ]
    },
    "529": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "530": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "532": {
      "op": "frame_dig -7",
      "defined_out": [
        "depositor#0 (copy)",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%0#0",
        "depositor#0 (copy)"
      ]
    },
    "534": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "535": {
      "op": "frame_dig -6",
      "defined_out": [
        "beneficiary#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%2#0",
        "beneficiary#0 (copy)"
      ]
    },
    "537": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "538": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "540": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "541": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%2#0"
      ]
    },
    "543": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%1#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "544": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "546": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%1#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "547": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%4#0"
      ]
    },
    "549": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%1#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "550": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%5#0"
      ]
    },
    "551": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "552": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%8#0",
        "0x0000000000000000"
      ]
    },
    "553": {
      "op": "concat",
      "defined_out": [
        "newRoute#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "newRoute#0"
      ]
    },
    "554": {
      "op": "box_put",
      "stack_out": []
    },
    "555": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "556": {
      "op": "bytec 6 // \"num_routes\"",
      "defined_out": [
        "\"num_routes\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_routes\""
      ]
    },
    "558": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "559": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "560": {
      "op": "btoi",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "561": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1"
      ]
    },
    "562": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "563": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "564": {
      "op": "bytec 6 // \"num_routes\"",
      "stack_out": [
        "val_as_bytes%6#0",
        "\"num_routes\""
      ]
    },
    "566": {
      "op": "swap",
      "stack_out": [
        "\"num_routes\"",
        "val_as_bytes%6#0"
      ]
    },
    "567": {
      "op": "app_global_put",
      "stack_out": []
    },
    "568": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "569": {
      "op": "bytec 7 // \"total_routed\"",
      "defined_out": [
        "\"total_routed\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_routed\""
      ]
    },
    "571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "572": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "573": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "574": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%6#0",
        "depositAmount#0 (copy)"
      ]
    },
    "576": {
      "op": "+",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "577": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0"
      ]
    },
    "578": {
      "op": "bytec 7 // \"total_routed\"",
      "stack_out": [
        "val_as_bytes%7#0",
        "\"total_routed\""
      ]
    },
    "580": {
      "op": "swap",
      "stack_out": [
        "\"total_routed\"",
        "val_as_bytes%7#0"
      ]
    },
    "581": {
      "op": "app_global_put",
      "stack_out": []
    },
    "582": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "583": {
      "op": "bytec_0 // \"current_active_route_total\"",
      "defined_out": [
        "\"current_active_route_total\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"current_active_route_total\""
      ]
    },
    "584": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "585": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "586": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "587": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%7#0",
        "depositAmount#0 (copy)"
      ]
    },
    "589": {
      "op": "+",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "590": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0"
      ]
    },
    "591": {
      "op": "bytec_0 // \"current_active_route_total\"",
      "stack_out": [
        "val_as_bytes%8#0",
        "\"current_active_route_total\""
      ]
    },
    "592": {
      "op": "swap",
      "stack_out": [
        "\"current_active_route_total\"",
        "val_as_bytes%8#0"
      ]
    },
    "593": {
      "op": "app_global_put",
      "stack_out": []
    },
    "594": {
      "retsub": true,
      "op": "retsub"
    },
    "595": {
      "subroutine": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.updateRouteClaimedAmount",
      "params": {
        "routeAppId#0": "uint64",
        "newClaimedAmount#0": "uint64"
      },
      "block": "updateRouteClaimedAmount",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "598": {
      "op": "frame_dig -2",
      "defined_out": [
        "routeAppId#0 (copy)"
      ],
      "stack_out": [
        "routeAppId#0 (copy)"
      ]
    },
    "600": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "601": {
      "op": "pushbytes \"r\"",
      "defined_out": [
        "\"r\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"r\""
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "\"r\"",
        "tmp%0#0"
      ]
    },
    "605": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "606": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "607": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "608": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "610": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_exists%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0",
        "1"
      ]
    },
    "611": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "612": {
      "error": "Route does not exist",
      "op": "assert // Route does not exist",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "613": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "614": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "route#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "maybe_exists%1#0"
      ]
    },
    "615": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "route#0"
      ]
    },
    "616": {
      "op": "dup",
      "defined_out": [
        "route#0",
        "route#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "route#0 (copy)"
      ]
    },
    "617": {
      "op": "pushint 112 // 112",
      "defined_out": [
        "112",
        "route#0",
        "route#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "route#0 (copy)",
        "112"
      ]
    },
    "619": {
      "op": "extract_uint64",
      "defined_out": [
        "route#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0"
      ]
    },
    "620": {
      "op": "frame_dig -1",
      "defined_out": [
        "newClaimedAmount#0 (copy)",
        "route#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "newClaimedAmount#0 (copy)"
      ]
    },
    "622": {
      "op": "dig 1",
      "defined_out": [
        "newClaimedAmount#0 (copy)",
        "route#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "newClaimedAmount#0 (copy)",
        "tmp%6#0 (copy)"
      ]
    },
    "624": {
      "op": ">=",
      "defined_out": [
        "route#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "625": {
      "error": "New claimed amount must be greater than or equal to current claimed amount",
      "op": "assert // New claimed amount must be greater than or equal to current claimed amount",
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0"
      ]
    },
    "626": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "route#0 (copy)"
      ]
    },
    "628": {
      "op": "pushint 104 // 104",
      "defined_out": [
        "104",
        "route#0",
        "route#0 (copy)",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "route#0 (copy)",
        "104"
      ]
    },
    "630": {
      "op": "extract_uint64",
      "defined_out": [
        "route#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "631": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "tmp%9#0",
        "newClaimedAmount#0 (copy)"
      ]
    },
    "633": {
      "op": ">=",
      "defined_out": [
        "route#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "tmp%10#0"
      ]
    },
    "634": {
      "error": "New claimed amount cannot exceed deposit amount",
      "op": "assert // New claimed amount cannot exceed deposit amount",
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0"
      ]
    },
    "635": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "tmp%6#0",
        "newClaimedAmount#0 (copy)"
      ]
    },
    "637": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "newClaimedAmount#0 (copy)",
        "tmp%6#0"
      ]
    },
    "638": {
      "op": "-",
      "defined_out": [
        "delta#0",
        "route#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "delta#0"
      ]
    },
    "639": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "delta#0",
        "newClaimedAmount#0 (copy)"
      ]
    },
    "641": {
      "op": "itob",
      "defined_out": [
        "delta#0",
        "route#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "route#0",
        "delta#0",
        "val_as_bytes%0#0"
      ]
    },
    "642": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "delta#0",
        "val_as_bytes%0#0",
        "route#0"
      ]
    },
    "644": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "delta#0",
        "route#0",
        "val_as_bytes%0#0"
      ]
    },
    "645": {
      "op": "replace2 112",
      "stack_out": [
        "tmp%1#0",
        "delta#0",
        "route#0"
      ]
    },
    "647": {
      "op": "uncover 2",
      "stack_out": [
        "delta#0",
        "route#0",
        "tmp%1#0"
      ]
    },
    "649": {
      "op": "swap",
      "stack_out": [
        "delta#0",
        "tmp%1#0",
        "route#0"
      ]
    },
    "650": {
      "op": "box_put",
      "stack_out": [
        "delta#0"
      ]
    },
    "651": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "delta#0"
      ],
      "stack_out": [
        "delta#0",
        "0"
      ]
    },
    "652": {
      "op": "bytec_0 // \"current_active_route_total\"",
      "defined_out": [
        "\"current_active_route_total\"",
        "0",
        "delta#0"
      ],
      "stack_out": [
        "delta#0",
        "0",
        "\"current_active_route_total\""
      ]
    },
    "653": {
      "op": "app_global_get_ex",
      "defined_out": [
        "delta#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "delta#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "654": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "delta#0",
        "maybe_value%2#0"
      ]
    },
    "655": {
      "op": "btoi",
      "defined_out": [
        "delta#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "delta#0",
        "tmp%15#0"
      ]
    },
    "656": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "delta#0"
      ]
    },
    "657": {
      "op": "-",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "658": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "659": {
      "op": "bytec_0 // \"current_active_route_total\"",
      "stack_out": [
        "val_as_bytes%1#0",
        "\"current_active_route_total\""
      ]
    },
    "660": {
      "op": "swap",
      "stack_out": [
        "\"current_active_route_total\"",
        "val_as_bytes%1#0"
      ]
    },
    "661": {
      "op": "app_global_put",
      "stack_out": []
    },
    "662": {
      "retsub": true,
      "op": "retsub"
    },
    "663": {
      "subroutine": "smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.getParams",
      "params": {},
      "block": "getParams",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "664": {
      "op": "bytec_3 // \"fee_bps\"",
      "defined_out": [
        "\"fee_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fee_bps\""
      ]
    },
    "665": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "666": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "667": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "668": {
      "op": "bytec 4 // \"treasury\"",
      "defined_out": [
        "\"treasury\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"treasury\""
      ]
    },
    "670": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "671": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "672": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "673": {
      "op": "bytec 5 // \"nominated_asset_id\"",
      "defined_out": [
        "\"nominated_asset_id\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"nominated_asset_id\""
      ]
    },
    "675": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "676": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "677": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "678": {
      "op": "bytec 8 // \"flux_oracle_app\"",
      "defined_out": [
        "\"flux_oracle_app\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"flux_oracle_app\""
      ]
    },
    "680": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "681": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "682": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "683": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "685": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "687": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "688": {
      "op": "swap",
      "stack_out": [
        "maybe_value%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "689": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%2#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "692": {
      "retsub": true,
      "op": "retsub"
    }
  }
}