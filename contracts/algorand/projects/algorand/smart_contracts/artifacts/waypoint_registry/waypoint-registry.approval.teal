#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "current_active_route_total" "admin" 0x0000000000000000 "fee_bps" "treasury" "nominated_asset_id" "num_routes" "total_routed" "flux_oracle_app"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:16-17
    // @contract({ name: "waypoint-registry", avmVersion: 11 })
    // export class WaypointRegistry extends Contract {
    txn NumAppArgs
    bz main_after_if_else@13
    pushbytess 0x5828935b 0xc597298c 0x8c26171a 0xc6aa6776 0xf7199eeb 0xaebc3416 0x8de40c28 // method "createApplication(account,uint64,account,uint64,application)void", method "setFeeBps(uint64)void", method "setTreasury(account)void", method "setNominatedAssetId(uint64)void", method "registerRoute(uint64,uint64,account,account,uint64,uint64,uint64,uint64,uint64)void", method "updateRouteClaimedAmount(uint64,uint64)void", method "getParams()(uint64,address,uint64,uint64)"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_setFeeBps_route@4 main_setTreasury_route@5 main_setNominatedAssetId_route@6 main_registerRoute_route@7 main_updateRouteClaimedAmount_route@8 main_getParams_route@9

main_after_if_else@13:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:16-17
    // @contract({ name: "waypoint-registry", avmVersion: 11 })
    // export class WaypointRegistry extends Contract {
    intc_0 // 0
    return

main_getParams_route@9:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:112
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getParams
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_updateRouteClaimedAmount_route@8:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:98
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:16-17
    // @contract({ name: "waypoint-registry", avmVersion: 11 })
    // export class WaypointRegistry extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:98
    // @abimethod({ allowActions: "NoOp" })
    callsub updateRouteClaimedAmount
    intc_1 // 1
    return

main_registerRoute_route@7:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:67
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:16-17
    // @contract({ name: "waypoint-registry", avmVersion: 11 })
    // export class WaypointRegistry extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    btoi
    txnas Accounts
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    btoi
    txna ApplicationArgs 9
    btoi
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:67
    // @abimethod({ allowActions: "NoOp" })
    callsub registerRoute
    intc_1 // 1
    return

main_setNominatedAssetId_route@6:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:61
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:16-17
    // @contract({ name: "waypoint-registry", avmVersion: 11 })
    // export class WaypointRegistry extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:61
    // @abimethod({ allowActions: "NoOp" })
    callsub setNominatedAssetId
    intc_1 // 1
    return

main_setTreasury_route@5:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:55
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:16-17
    // @contract({ name: "waypoint-registry", avmVersion: 11 })
    // export class WaypointRegistry extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:55
    // @abimethod({ allowActions: "NoOp" })
    callsub setTreasury
    intc_1 // 1
    return

main_setFeeBps_route@4:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:49
    // @abimethod({ allowActions: "NoOp" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:16-17
    // @contract({ name: "waypoint-registry", avmVersion: 11 })
    // export class WaypointRegistry extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:49
    // @abimethod({ allowActions: "NoOp" })
    callsub setFeeBps
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:30
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:16-17
    // @contract({ name: "waypoint-registry", avmVersion: 11 })
    // export class WaypointRegistry extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txnas Applications
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:30
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.createApplication(admin: bytes, feeBps: uint64, treasury: bytes, nominatedAssetId: uint64, flux_oracle_app: uint64) -> void:
createApplication:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:30-37
    // @abimethod({ allowActions: "NoOp", onCreate: "require" })
    // public createApplication(
    //   admin: Account,
    //   feeBps: uint64,
    //   treasury: Account,
    //   nominatedAssetId: uint64,
    //   flux_oracle_app: Application
    // ): void {
    proto 5 0
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:19
    // admin = GlobalState<Account>();
    bytec_1 // "admin"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:38
    // this.admin.value = admin;
    frame_dig -5
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:39
    // this.fee_bps.value = new UintN64(feeBps);
    frame_dig -4
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:20
    // fee_bps = GlobalState<UintN64>();
    bytec_3 // "fee_bps"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:39
    // this.fee_bps.value = new UintN64(feeBps);
    swap
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:22
    // treasury = GlobalState<Account>();
    bytec 4 // "treasury"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:40
    // this.treasury.value = treasury;
    frame_dig -3
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:21
    // contract_version = GlobalState<UintN64>();
    pushbytess "contract_version" 0x00000000000003e8 // "contract_version", 0x00000000000003e8
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:41
    // this.contract_version.value = new UintN64(CONTRACT_VERSION);
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:42
    // this.nominated_asset_id.value = new UintN64(nominatedAssetId);
    frame_dig -2
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:23
    // nominated_asset_id = GlobalState<UintN64>();
    bytec 5 // "nominated_asset_id"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:42
    // this.nominated_asset_id.value = new UintN64(nominatedAssetId);
    swap
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:25
    // num_routes = GlobalState<UintN64>();
    bytec 6 // "num_routes"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:43
    // this.num_routes.value = new UintN64(0);
    bytec_2 // 0x0000000000000000
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:26
    // total_routed = GlobalState<UintN64>(); // total routed including pending, complete and active
    bytec 7 // "total_routed"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:44
    // this.total_routed.value = new UintN64(0);
    bytec_2 // 0x0000000000000000
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:27
    // current_active_route_total = GlobalState<UintN64>(); // total currently active (deposited but not fully claimed)
    bytec_0 // "current_active_route_total"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:45
    // this.current_active_route_total.value = new UintN64(0);
    bytec_2 // 0x0000000000000000
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:28
    // flux_oracle_app = GlobalState<Application>();
    bytec 8 // "flux_oracle_app"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:46
    // this.flux_oracle_app.value = flux_oracle_app;
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setFeeBps(feeBps: uint64) -> void:
setFeeBps:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:49-50
    // @abimethod({ allowActions: "NoOp" })
    // public setFeeBps(feeBps: uint64): void {
    proto 1 0
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:51
    // assert(op.Txn.sender === this.admin.value, "Only admin can set fee bps");
    txn Sender
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:19
    // admin = GlobalState<Account>();
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:51
    // assert(op.Txn.sender === this.admin.value, "Only admin can set fee bps");
    ==
    assert // Only admin can set fee bps
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:52
    // this.fee_bps.value = new UintN64(feeBps);
    frame_dig -1
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:20
    // fee_bps = GlobalState<UintN64>();
    bytec_3 // "fee_bps"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:52
    // this.fee_bps.value = new UintN64(feeBps);
    swap
    app_global_put
    retsub


// smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setTreasury(treasury: bytes) -> void:
setTreasury:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:55-56
    // @abimethod({ allowActions: "NoOp" })
    // public setTreasury(treasury: Account): void {
    proto 1 0
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:57
    // assert(op.Txn.sender === this.admin.value, "Only admin can set treasury");
    txn Sender
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:19
    // admin = GlobalState<Account>();
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:57
    // assert(op.Txn.sender === this.admin.value, "Only admin can set treasury");
    ==
    assert // Only admin can set treasury
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:22
    // treasury = GlobalState<Account>();
    bytec 4 // "treasury"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:58
    // this.treasury.value = treasury;
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.setNominatedAssetId(nominatedAssetId: uint64) -> void:
setNominatedAssetId:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:61-62
    // @abimethod({ allowActions: "NoOp" })
    // public setNominatedAssetId(nominatedAssetId: uint64): void {
    proto 1 0
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:63
    // assert(op.Txn.sender === this.admin.value, "Only admin can set nominated asset id");
    txn Sender
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:19
    // admin = GlobalState<Account>();
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:63
    // assert(op.Txn.sender === this.admin.value, "Only admin can set nominated asset id");
    ==
    assert // Only admin can set nominated asset id
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:64
    // this.nominated_asset_id.value = new UintN64(nominatedAssetId);
    frame_dig -1
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:23
    // nominated_asset_id = GlobalState<UintN64>();
    bytec 5 // "nominated_asset_id"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:64
    // this.nominated_asset_id.value = new UintN64(nominatedAssetId);
    swap
    app_global_put
    retsub


// smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.registerRoute(routeAppId: uint64, tokenId: uint64, depositor: bytes, beneficiary: bytes, startTs: uint64, periodSecs: uint64, payoutAmount: uint64, maxPeriods: uint64, depositAmount: uint64) -> void:
registerRoute:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:67-78
    // @abimethod({ allowActions: "NoOp" })
    // public registerRoute(
    //   routeAppId: uint64,
    //   tokenId: uint64,
    //   depositor: Account,
    //   beneficiary: Account,
    //   startTs: uint64,
    //   periodSecs: uint64,
    //   payoutAmount: uint64,
    //   maxPeriods: uint64,
    //   depositAmount: uint64
    // ): void {
    proto 9 0
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:79
    // assert(this.routes(routeAppId).exists === false, "Route already exists");
    frame_dig -9
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:24
    // routes = BoxMap<uint64, Route>({ keyPrefix: "r" }); // route app id -> token id
    pushbytes "r"
    swap
    concat
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:79
    // assert(this.routes(routeAppId).exists === false, "Route already exists");
    dup
    box_len
    bury 1
    !
    assert // Route already exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:82
    // tokenId: new UintN64(tokenId),
    frame_dig -8
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:85
    // startTs: new UintN64(startTs),
    frame_dig -5
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:86
    // periodSecs: new UintN64(periodSecs),
    frame_dig -4
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:87
    // payoutAmount: new UintN64(payoutAmount),
    frame_dig -3
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:88
    // maxPeriods: new UintN64(maxPeriods),
    frame_dig -2
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:89
    // depositAmount: new UintN64(depositAmount),
    frame_dig -1
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:81-91
    // const newRoute = new Route({
    //   tokenId: new UintN64(tokenId),
    //   depositor: new Address(depositor),
    //   beneficiary: new Address(beneficiary),
    //   startTs: new UintN64(startTs),
    //   periodSecs: new UintN64(periodSecs),
    //   payoutAmount: new UintN64(payoutAmount),
    //   maxPeriods: new UintN64(maxPeriods),
    //   depositAmount: new UintN64(depositAmount),
    //   claimedAmount: new UintN64(0),
    // });
    uncover 5
    frame_dig -7
    concat
    frame_dig -6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:90
    // claimedAmount: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:81-91
    // const newRoute = new Route({
    //   tokenId: new UintN64(tokenId),
    //   depositor: new Address(depositor),
    //   beneficiary: new Address(beneficiary),
    //   startTs: new UintN64(startTs),
    //   periodSecs: new UintN64(periodSecs),
    //   payoutAmount: new UintN64(payoutAmount),
    //   maxPeriods: new UintN64(maxPeriods),
    //   depositAmount: new UintN64(depositAmount),
    //   claimedAmount: new UintN64(0),
    // });
    concat
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:92
    // this.routes(routeAppId).value = newRoute.copy();
    box_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:25
    // num_routes = GlobalState<UintN64>();
    intc_0 // 0
    bytec 6 // "num_routes"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:93
    // this.num_routes.value = new UintN64(this.num_routes.value.native + 1);
    btoi
    intc_1 // 1
    +
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:25
    // num_routes = GlobalState<UintN64>();
    bytec 6 // "num_routes"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:93
    // this.num_routes.value = new UintN64(this.num_routes.value.native + 1);
    swap
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:26
    // total_routed = GlobalState<UintN64>(); // total routed including pending, complete and active
    intc_0 // 0
    bytec 7 // "total_routed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:94
    // this.total_routed.value = new UintN64(this.total_routed.value.native + depositAmount);
    btoi
    frame_dig -1
    +
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:26
    // total_routed = GlobalState<UintN64>(); // total routed including pending, complete and active
    bytec 7 // "total_routed"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:94
    // this.total_routed.value = new UintN64(this.total_routed.value.native + depositAmount);
    swap
    app_global_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:27
    // current_active_route_total = GlobalState<UintN64>(); // total currently active (deposited but not fully claimed)
    intc_0 // 0
    bytec_0 // "current_active_route_total"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:95
    // this.current_active_route_total.value = new UintN64(this.current_active_route_total.value.native + depositAmount);
    btoi
    frame_dig -1
    +
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:27
    // current_active_route_total = GlobalState<UintN64>(); // total currently active (deposited but not fully claimed)
    bytec_0 // "current_active_route_total"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:95
    // this.current_active_route_total.value = new UintN64(this.current_active_route_total.value.native + depositAmount);
    swap
    app_global_put
    retsub


// smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.updateRouteClaimedAmount(routeAppId: uint64, newClaimedAmount: uint64) -> void:
updateRouteClaimedAmount:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:98-99
    // @abimethod({ allowActions: "NoOp" })
    // public updateRouteClaimedAmount(routeAppId: uint64, newClaimedAmount: uint64): void {
    proto 2 0
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:100
    // assert(this.routes(routeAppId).exists === true, "Route does not exist");
    frame_dig -2
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:24
    // routes = BoxMap<uint64, Route>({ keyPrefix: "r" }); // route app id -> token id
    pushbytes "r"
    swap
    concat
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:100
    // assert(this.routes(routeAppId).exists === true, "Route does not exist");
    dup
    box_len
    bury 1
    intc_1 // 1
    ==
    assert // Route does not exist
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:101
    // const route = this.routes(routeAppId).value.copy();
    dup
    box_get
    assert // Box must have value
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:102
    // assert(newClaimedAmount >= route.claimedAmount.native, "New claimed amount must be greater than or equal to current claimed amount");
    dup
    pushint 112 // 112
    extract_uint64
    frame_dig -1
    dig 1
    >=
    assert // New claimed amount must be greater than or equal to current claimed amount
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:103
    // assert(newClaimedAmount <= route.depositAmount.native, "New claimed amount cannot exceed deposit amount");
    dig 1
    pushint 104 // 104
    extract_uint64
    frame_dig -1
    >=
    assert // New claimed amount cannot exceed deposit amount
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:105
    // const delta: uint64 = newClaimedAmount - route.claimedAmount.native;
    frame_dig -1
    swap
    -
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:106
    // route.claimedAmount = new UintN64(newClaimedAmount);
    frame_dig -1
    itob
    uncover 2
    swap
    replace2 112
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:107
    // this.routes(routeAppId).value = route.copy();
    uncover 2
    swap
    box_put
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:27
    // current_active_route_total = GlobalState<UintN64>(); // total currently active (deposited but not fully claimed)
    intc_0 // 0
    bytec_0 // "current_active_route_total"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:110
    // this.current_active_route_total.value = new UintN64(this.current_active_route_total.value.native - delta);
    btoi
    swap
    -
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:27
    // current_active_route_total = GlobalState<UintN64>(); // total currently active (deposited but not fully claimed)
    bytec_0 // "current_active_route_total"
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:110
    // this.current_active_route_total.value = new UintN64(this.current_active_route_total.value.native - delta);
    swap
    app_global_put
    retsub


// smart_contracts/waypoint_registry/waypoint-registry.algo.ts::WaypointRegistry.getParams() -> bytes:
getParams:
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:20
    // fee_bps = GlobalState<UintN64>();
    intc_0 // 0
    bytec_3 // "fee_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:22
    // treasury = GlobalState<Account>();
    intc_0 // 0
    bytec 4 // "treasury"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:23
    // nominated_asset_id = GlobalState<UintN64>();
    intc_0 // 0
    bytec 5 // "nominated_asset_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:28
    // flux_oracle_app = GlobalState<Application>();
    intc_0 // 0
    bytec 8 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:118
    // flux_oracle_app_id: new UintN64(this.flux_oracle_app.value.id),
    itob
    // smart_contracts/waypoint_registry/waypoint-registry.algo.ts:114-119
    // return new WaypointRegistryParams({
    //   fee_bps: this.fee_bps.value,
    //   treasury: new Address(this.treasury.value),
    //   nominated_asset_id: this.nominated_asset_id.value,
    //   flux_oracle_app_id: new UintN64(this.flux_oracle_app.value.id),
    // });
    uncover 3
    uncover 3
    concat
    swap
    concat
    swap
    concat
    retsub
